
Hb-meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004128  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004274  08004274  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08004274  08004274  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004274  08004274  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800427c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000098  08004314  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004314  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b89a  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  0002b95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a31  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca3d  00000000  00000000  00047771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091017  00000000  00000000  000541ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e51c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000e5218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08004220 	.word	0x08004220

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08004220 	.word	0x08004220

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
	...

08000f80 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	leds[0]=0x2000;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <main+0x44>)
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	601a      	str	r2, [r3, #0]
	leds[1]=0x4000;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <main+0x44>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	605a      	str	r2, [r3, #4]
	leds[2]=0x8000;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <main+0x44>)
 8000fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fca:	609a      	str	r2, [r3, #8]
	i=0;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <main+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fd39 	bl	8001a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f815 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 f943 	bl	8001264 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fde:	f000 f869 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fe2:	f000 f8ef 	bl	80011c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <main+0x4c>)
 8000fe8:	f002 fac2 	bl	8003570 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <main+0x50>)
 8000fee:	f001 f9c1 	bl	8002374 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <main+0x42>
 8000ff4:	20000128 	.word	0x20000128
 8000ff8:	200000b4 	.word	0x200000b4
 8000ffc:	20000140 	.word	0x20000140
 8001000:	200000ec 	.word	0x200000ec

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100e:	2228      	movs	r2, #40	; 0x28
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f002 ffa4 	bl	8003f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001044:	2300      	movs	r3, #0
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001048:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fcbc 	bl	80029d0 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800105e:	f000 fbdf 	bl	8001820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ff26 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800108a:	f000 fbc9 	bl	8001820 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800108e:	2302      	movs	r3, #2
 8001090:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001092:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001096:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f89e 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010a6:	f000 fbbb 	bl	8001820 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <MX_ADC1_Init+0x108>)
 80010c6:	4a3e      	ldr	r2, [pc, #248]	; (80011c0 <MX_ADC1_Init+0x10c>)
 80010c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ca:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <MX_ADC1_Init+0x108>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <MX_ADC1_Init+0x108>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <MX_ADC1_Init+0x108>)
 80010da:	2201      	movs	r2, #1
 80010dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <MX_ADC1_Init+0x108>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <MX_ADC1_Init+0x108>)
 80010e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <MX_ADC1_Init+0x108>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <MX_ADC1_Init+0x108>)
 80010f4:	2206      	movs	r2, #6
 80010f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4830      	ldr	r0, [pc, #192]	; (80011bc <MX_ADC1_Init+0x108>)
 80010fa:	f000 fd2b 	bl	8001b54 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8001104:	f000 fb8c 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2301      	movs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001110:	2307      	movs	r3, #7
 8001112:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4828      	ldr	r0, [pc, #160]	; (80011bc <MX_ADC1_Init+0x108>)
 800111a:	f000 ffa7 	bl	800206c <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001124:	f000 fb7c 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_ADC1_Init+0x108>)
 8001136:	f000 ff99 	bl	800206c <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001140:	f000 fb6e 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001144:	2303      	movs	r3, #3
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001148:	2303      	movs	r3, #3
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <MX_ADC1_Init+0x108>)
 8001152:	f000 ff8b 	bl	800206c <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800115c:	f000 fb60 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001160:	2304      	movs	r3, #4
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001164:	2304      	movs	r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4813      	ldr	r0, [pc, #76]	; (80011bc <MX_ADC1_Init+0x108>)
 800116e:	f000 ff7d 	bl	800206c <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001178:	f000 fb52 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800117c:	2306      	movs	r3, #6
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001180:	2305      	movs	r3, #5
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ADC1_Init+0x108>)
 800118a:	f000 ff6f 	bl	800206c <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001194:	f000 fb44 	bl	8001820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001198:	2307      	movs	r3, #7
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800119c:	2306      	movs	r3, #6
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_ADC1_Init+0x108>)
 80011a6:	f000 ff61 	bl	800206c <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011b0:	f000 fb36 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200000ec 	.word	0x200000ec
 80011c0:	40012400 	.word	0x40012400

080011c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM1_Init+0x98>)
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_TIM1_Init+0x9c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM1_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM1_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM1_Init+0x98>)
 80011f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM1_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM1_Init+0x98>)
 800120e:	f002 f95f 	bl	80034d0 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001218:	f000 fb02 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM1_Init+0x98>)
 800122a:	f002 fafb 	bl	8003824 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001234:	f000 faf4 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM1_Init+0x98>)
 8001246:	f002 fcd7 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001250:	f000 fae6 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000140 	.word	0x20000140
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001278:	2010      	movs	r0, #16
 800127a:	f7ff fe81 	bl	8000f80 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800127e:	2004      	movs	r0, #4
 8001280:	f7ff fe7e 	bl	8000f80 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001284:	2008      	movs	r0, #8
 8001286:	f7ff fe7b 	bl	8000f80 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin);
 800128a:	490a      	ldr	r1, [pc, #40]	; (80012b4 <MX_GPIO_Init+0x50>)
 800128c:	480a      	ldr	r0, [pc, #40]	; (80012b8 <MX_GPIO_Init+0x54>)
 800128e:	f7ff fe67 	bl	8000f60 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_GPIO_Init+0x50>)
 8001294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001296:	2301      	movs	r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_GPIO_Init+0x54>)
 80012a8:	f002 fdce 	bl	8003e48 <LL_GPIO_Init>

}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	04e000e0 	.word	0x04e000e0
 80012b8:	40011000 	.word	0x40011000

080012bc <timerUpCallBack>:

/* USER CODE BEGIN 4 */
void timerUpCallBack(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
i+=1;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <timerUpCallBack+0x2c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <timerUpCallBack+0x2c>)
 80012ca:	701a      	strb	r2, [r3, #0]
if(i>2){
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <timerUpCallBack+0x2c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d902      	bls.n	80012da <timerUpCallBack+0x1e>
	i=0;
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <timerUpCallBack+0x2c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
}
timerEventHandler(i);
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <timerUpCallBack+0x2c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f806 	bl	80012f0 <timerEventHandler>

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000b4 	.word	0x200000b4
 80012ec:	00000000 	.word	0x00000000

080012f0 <timerEventHandler>:
void timerEventHandler(uint8_t i){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR=leds[i];
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a78      	ldr	r2, [pc, #480]	; (80014e0 <timerEventHandler+0x1f0>)
 80012fe:	4979      	ldr	r1, [pc, #484]	; (80014e4 <timerEventHandler+0x1f4>)
 8001300:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001304:	60d3      	str	r3, [r2, #12]
	if(i==0){				//	660 nm LED
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f040 8081 	bne.w	8001410 <timerEventHandler+0x120>
	 HAL_ADC_Start(&hadc1);
 800130e:	4876      	ldr	r0, [pc, #472]	; (80014e8 <timerEventHandler+0x1f8>)
 8001310:	f000 fcf8 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 8001314:	2164      	movs	r1, #100	; 0x64
 8001316:	4874      	ldr	r0, [pc, #464]	; (80014e8 <timerEventHandler+0x1f8>)
 8001318:	f000 fda2 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_660_discr_1=(uint16_t)HAL_ADC_GetValue(&hadc1);
 800131c:	4872      	ldr	r0, [pc, #456]	; (80014e8 <timerEventHandler+0x1f8>)
 800131e:	f000 fe99 	bl	8002054 <HAL_ADC_GetValue>
 8001322:	4603      	mov	r3, r0
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <timerEventHandler+0x1fc>)
 8001328:	801a      	strh	r2, [r3, #0]
     data_660nm_1 = ((float)dat_660_discr_1)*3/4096;
 800132a:	4b70      	ldr	r3, [pc, #448]	; (80014ec <timerEventHandler+0x1fc>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fbe2 	bl	8000af8 <__aeabi_ui2f>
 8001334:	4603      	mov	r3, r0
 8001336:	496e      	ldr	r1, [pc, #440]	; (80014f0 <timerEventHandler+0x200>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fc35 	bl	8000ba8 <__aeabi_fmul>
 800133e:	4603      	mov	r3, r0
 8001340:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fce3 	bl	8000d10 <__aeabi_fdiv>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <timerEventHandler+0x204>)
 8001350:	601a      	str	r2, [r3, #0]

	 HAL_ADC_Start(&hadc1);
 8001352:	4865      	ldr	r0, [pc, #404]	; (80014e8 <timerEventHandler+0x1f8>)
 8001354:	f000 fcd6 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 8001358:	2164      	movs	r1, #100	; 0x64
 800135a:	4863      	ldr	r0, [pc, #396]	; (80014e8 <timerEventHandler+0x1f8>)
 800135c:	f000 fd80 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_660_discr_2=(uint16_t)HAL_ADC_GetValue(&hadc1);
 8001360:	4861      	ldr	r0, [pc, #388]	; (80014e8 <timerEventHandler+0x1f8>)
 8001362:	f000 fe77 	bl	8002054 <HAL_ADC_GetValue>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <timerEventHandler+0x208>)
 800136c:	801a      	strh	r2, [r3, #0]
     data_660nm_2 = ((float)dat_660_discr_2)*3/4096;
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <timerEventHandler+0x208>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fbc0 	bl	8000af8 <__aeabi_ui2f>
 8001378:	4603      	mov	r3, r0
 800137a:	495d      	ldr	r1, [pc, #372]	; (80014f0 <timerEventHandler+0x200>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fc13 	bl	8000ba8 <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fcc1 	bl	8000d10 <__aeabi_fdiv>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <timerEventHandler+0x20c>)
 8001394:	601a      	str	r2, [r3, #0]

     if(data_660nm_1>=data_660nm_2){
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <timerEventHandler+0x204>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <timerEventHandler+0x20c>)
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fdb3 	bl	8000f0c <__aeabi_fcmpge>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00f      	beq.n	80013cc <timerEventHandler+0xdc>
//     delta1=dat1-dat2;
      OD_660nm=(float)logf(data_660nm_2/data_660nm_1);
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <timerEventHandler+0x20c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <timerEventHandler+0x204>)
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fcaa 	bl	8000d10 <__aeabi_fdiv>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fdd6 	bl	8003f70 <logf>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <timerEventHandler+0x210>)
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e00e      	b.n	80013ea <timerEventHandler+0xfa>
     }
     else{
//    	 delta1=dat2-dat1;
    	 OD_660nm=(float)logf(data_660nm_1/data_660nm_2);
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <timerEventHandler+0x204>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <timerEventHandler+0x20c>)
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc9a 	bl	8000d10 <__aeabi_fdiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fdc6 	bl	8003f70 <logf>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <timerEventHandler+0x210>)
 80013e8:	6013      	str	r3, [r2, #0]
     }
     Ua_660nm=OD_660nm/(-0.508);
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <timerEventHandler+0x210>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f812 	bl	8000418 <__aeabi_f2d>
 80013f4:	a338      	add	r3, pc, #224	; (adr r3, 80014d8 <timerEventHandler+0x1e8>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f98f 	bl	800071c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fa71 	bl	80008ec <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <timerEventHandler+0x214>)
 800140e:	6013      	str	r3, [r2, #0]
}
	if(i==1){			//	880 nm LED
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	f040 80a4 	bne.w	8001560 <timerEventHandler+0x270>
	 HAL_ADC_Start(&hadc1);
 8001418:	4833      	ldr	r0, [pc, #204]	; (80014e8 <timerEventHandler+0x1f8>)
 800141a:	f000 fc73 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 800141e:	2164      	movs	r1, #100	; 0x64
 8001420:	4831      	ldr	r0, [pc, #196]	; (80014e8 <timerEventHandler+0x1f8>)
 8001422:	f000 fd1d 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_880_discr_1=(uint16_t)HAL_ADC_GetValue(&hadc1);
 8001426:	4830      	ldr	r0, [pc, #192]	; (80014e8 <timerEventHandler+0x1f8>)
 8001428:	f000 fe14 	bl	8002054 <HAL_ADC_GetValue>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <timerEventHandler+0x218>)
 8001432:	801a      	strh	r2, [r3, #0]
     data_880nm_1 = ((float)dat_880_discr_1)*3/4096;
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <timerEventHandler+0x218>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb5d 	bl	8000af8 <__aeabi_ui2f>
 800143e:	4603      	mov	r3, r0
 8001440:	492b      	ldr	r1, [pc, #172]	; (80014f0 <timerEventHandler+0x200>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbb0 	bl	8000ba8 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fc5e 	bl	8000d10 <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <timerEventHandler+0x21c>)
 800145a:	601a      	str	r2, [r3, #0]

	 HAL_ADC_Start(&hadc1);
 800145c:	4822      	ldr	r0, [pc, #136]	; (80014e8 <timerEventHandler+0x1f8>)
 800145e:	f000 fc51 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 8001462:	2164      	movs	r1, #100	; 0x64
 8001464:	4820      	ldr	r0, [pc, #128]	; (80014e8 <timerEventHandler+0x1f8>)
 8001466:	f000 fcfb 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_880_discr_2=(uint16_t)HAL_ADC_GetValue(&hadc1);
 800146a:	481f      	ldr	r0, [pc, #124]	; (80014e8 <timerEventHandler+0x1f8>)
 800146c:	f000 fdf2 	bl	8002054 <HAL_ADC_GetValue>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <timerEventHandler+0x220>)
 8001476:	801a      	strh	r2, [r3, #0]
     data_880nm_2 = ((float)dat_880_discr_2)*3/4096;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <timerEventHandler+0x220>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fb3b 	bl	8000af8 <__aeabi_ui2f>
 8001482:	4603      	mov	r3, r0
 8001484:	491a      	ldr	r1, [pc, #104]	; (80014f0 <timerEventHandler+0x200>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb8e 	bl	8000ba8 <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
 800148e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc3c 	bl	8000d10 <__aeabi_fdiv>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <timerEventHandler+0x224>)
 800149e:	601a      	str	r2, [r3, #0]

     if(data_880nm_1>=data_880nm_2){
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <timerEventHandler+0x21c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <timerEventHandler+0x224>)
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fd2e 	bl	8000f0c <__aeabi_fcmpge>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d032      	beq.n	800151c <timerEventHandler+0x22c>
//          delta2=dat3-dat4;
           OD_880nm=(float)logf(data_880nm_2/data_880nm_1);
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <timerEventHandler+0x224>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a14      	ldr	r2, [pc, #80]	; (800150c <timerEventHandler+0x21c>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc25 	bl	8000d10 <__aeabi_fdiv>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fd51 	bl	8003f70 <logf>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a11      	ldr	r2, [pc, #68]	; (8001518 <timerEventHandler+0x228>)
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e031      	b.n	800153a <timerEventHandler+0x24a>
 80014d6:	bf00      	nop
 80014d8:	374bc6a8 	.word	0x374bc6a8
 80014dc:	bfe04189 	.word	0xbfe04189
 80014e0:	40011000 	.word	0x40011000
 80014e4:	20000128 	.word	0x20000128
 80014e8:	200000ec 	.word	0x200000ec
 80014ec:	20000188 	.word	0x20000188
 80014f0:	40400000 	.word	0x40400000
 80014f4:	20000120 	.word	0x20000120
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	200000bc 	.word	0x200000bc
 8001500:	20000190 	.word	0x20000190
 8001504:	200000d4 	.word	0x200000d4
 8001508:	20000194 	.word	0x20000194
 800150c:	200000dc 	.word	0x200000dc
 8001510:	20000196 	.word	0x20000196
 8001514:	200000b8 	.word	0x200000b8
 8001518:	20000124 	.word	0x20000124
          }
          else{
//         	 delta2=dat4-dat3;
         	 OD_880nm=(float)logf(data_880nm_1/data_880nm_2);
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <timerEventHandler+0x340>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a44      	ldr	r2, [pc, #272]	; (8001634 <timerEventHandler+0x344>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fbf2 	bl	8000d10 <__aeabi_fdiv>
 800152c:	4603      	mov	r3, r0
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fd1e 	bl	8003f70 <logf>
 8001534:	4603      	mov	r3, r0
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <timerEventHandler+0x348>)
 8001538:	6013      	str	r3, [r2, #0]
          }
     Ua_880nm=OD_880nm/(-0.508);
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <timerEventHandler+0x348>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ff6a 	bl	8000418 <__aeabi_f2d>
 8001544:	a338      	add	r3, pc, #224	; (adr r3, 8001628 <timerEventHandler+0x338>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f8e7 	bl	800071c <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff f9c9 	bl	80008ec <__aeabi_d2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4a37      	ldr	r2, [pc, #220]	; (800163c <timerEventHandler+0x34c>)
 800155e:	6013      	str	r3, [r2, #0]
}
	if(i==2){			//	940 nm LED
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 8129 	bne.w	80017ba <timerEventHandler+0x4ca>
	 HAL_ADC_Start(&hadc1);
 8001568:	4835      	ldr	r0, [pc, #212]	; (8001640 <timerEventHandler+0x350>)
 800156a:	f000 fbcb 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 800156e:	2164      	movs	r1, #100	; 0x64
 8001570:	4833      	ldr	r0, [pc, #204]	; (8001640 <timerEventHandler+0x350>)
 8001572:	f000 fc75 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_940_discr_1=(uint16_t)HAL_ADC_GetValue(&hadc1);
 8001576:	4832      	ldr	r0, [pc, #200]	; (8001640 <timerEventHandler+0x350>)
 8001578:	f000 fd6c 	bl	8002054 <HAL_ADC_GetValue>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <timerEventHandler+0x354>)
 8001582:	801a      	strh	r2, [r3, #0]
     data_940nm_1 = ((float)dat_940_discr_1)*3/4096;
 8001584:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <timerEventHandler+0x354>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fab5 	bl	8000af8 <__aeabi_ui2f>
 800158e:	4603      	mov	r3, r0
 8001590:	492d      	ldr	r1, [pc, #180]	; (8001648 <timerEventHandler+0x358>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fb08 	bl	8000ba8 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fbb6 	bl	8000d10 <__aeabi_fdiv>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <timerEventHandler+0x35c>)
 80015aa:	601a      	str	r2, [r3, #0]

	 HAL_ADC_Start(&hadc1);
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <timerEventHandler+0x350>)
 80015ae:	f000 fba9 	bl	8001d04 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1,100);
 80015b2:	2164      	movs	r1, #100	; 0x64
 80015b4:	4822      	ldr	r0, [pc, #136]	; (8001640 <timerEventHandler+0x350>)
 80015b6:	f000 fc53 	bl	8001e60 <HAL_ADC_PollForConversion>
     dat_940_discr_2=(uint16_t)HAL_ADC_GetValue(&hadc1);
 80015ba:	4821      	ldr	r0, [pc, #132]	; (8001640 <timerEventHandler+0x350>)
 80015bc:	f000 fd4a 	bl	8002054 <HAL_ADC_GetValue>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <timerEventHandler+0x360>)
 80015c6:	801a      	strh	r2, [r3, #0]
     data_940nm_2 = ((float)dat_940_discr_2)*3/4096;
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <timerEventHandler+0x360>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa93 	bl	8000af8 <__aeabi_ui2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	491c      	ldr	r1, [pc, #112]	; (8001648 <timerEventHandler+0x358>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fae6 	bl	8000ba8 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb94 	bl	8000d10 <__aeabi_fdiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <timerEventHandler+0x364>)
 80015ee:	601a      	str	r2, [r3, #0]

     if(data_940nm_1>=data_940nm_2){
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <timerEventHandler+0x35c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <timerEventHandler+0x364>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc86 	bl	8000f0c <__aeabi_fcmpge>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d02a      	beq.n	800165c <timerEventHandler+0x36c>
//          delta3=dat5-dat6;
          OD_940nm=(float)logf(data_940nm_2/data_940nm_1);
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <timerEventHandler+0x364>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <timerEventHandler+0x35c>)
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb7d 	bl	8000d10 <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	4618      	mov	r0, r3
 800161a:	f002 fca9 	bl	8003f70 <logf>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <timerEventHandler+0x368>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e029      	b.n	800167a <timerEventHandler+0x38a>
 8001626:	bf00      	nop
 8001628:	374bc6a8 	.word	0x374bc6a8
 800162c:	bfe04189 	.word	0xbfe04189
 8001630:	200000dc 	.word	0x200000dc
 8001634:	200000b8 	.word	0x200000b8
 8001638:	20000124 	.word	0x20000124
 800163c:	20000134 	.word	0x20000134
 8001640:	200000ec 	.word	0x200000ec
 8001644:	20000198 	.word	0x20000198
 8001648:	40400000 	.word	0x40400000
 800164c:	2000011c 	.word	0x2000011c
 8001650:	20000138 	.word	0x20000138
 8001654:	200000c8 	.word	0x200000c8
 8001658:	200000e0 	.word	0x200000e0
          }
          else{
//         	 delta3=dat6-dat5;
         	OD_940nm=(float)logf(data_940nm_1/data_940nm_2);
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <timerEventHandler+0x4e0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5c      	ldr	r2, [pc, #368]	; (80017d4 <timerEventHandler+0x4e4>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fb52 	bl	8000d10 <__aeabi_fdiv>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fc7e 	bl	8003f70 <logf>
 8001674:	4603      	mov	r3, r0
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <timerEventHandler+0x4e8>)
 8001678:	6013      	str	r3, [r2, #0]
          }
     Ua_940nm=OD_940nm/(-0.508);
 800167a:	4b57      	ldr	r3, [pc, #348]	; (80017d8 <timerEventHandler+0x4e8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe feca 	bl	8000418 <__aeabi_f2d>
 8001684:	a350      	add	r3, pc, #320	; (adr r3, 80017c8 <timerEventHandler+0x4d8>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f847 	bl	800071c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff f929 	bl	80008ec <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <timerEventHandler+0x4ec>)
 800169e:	6013      	str	r3, [r2, #0]

     CHb=(E_Hb_660_*Ua_660nm+E_Hb_880_*Ua_880nm+E_Hb_940_*Ua_940nm)*67000;
 80016a0:	4b4f      	ldr	r3, [pc, #316]	; (80017e0 <timerEventHandler+0x4f0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <timerEventHandler+0x4f4>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fa7c 	bl	8000ba8 <__aeabi_fmul>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461c      	mov	r4, r3
 80016b4:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <timerEventHandler+0x4f8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <timerEventHandler+0x4fc>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fa72 	bl	8000ba8 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4619      	mov	r1, r3
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff f965 	bl	8000998 <__addsf3>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <timerEventHandler+0x500>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a41      	ldr	r2, [pc, #260]	; (80017dc <timerEventHandler+0x4ec>)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fa63 	bl	8000ba8 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff f956 	bl	8000998 <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4941      	ldr	r1, [pc, #260]	; (80017f4 <timerEventHandler+0x504>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa59 	bl	8000ba8 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <timerEventHandler+0x508>)
 80016fc:	601a      	str	r2, [r3, #0]
	 CHbO2=(E_HbO2_660_*Ua_660nm+E_HbO2_880_*Ua_880nm+E_HbO2_940_*Ua_940nm)*67000;
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <timerEventHandler+0x50c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a38      	ldr	r2, [pc, #224]	; (80017e4 <timerEventHandler+0x4f4>)
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa4d 	bl	8000ba8 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	461c      	mov	r4, r3
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <timerEventHandler+0x510>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a35      	ldr	r2, [pc, #212]	; (80017ec <timerEventHandler+0x4fc>)
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa43 	bl	8000ba8 <__aeabi_fmul>
 8001722:	4603      	mov	r3, r0
 8001724:	4619      	mov	r1, r3
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff f936 	bl	8000998 <__addsf3>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <timerEventHandler+0x514>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <timerEventHandler+0x4ec>)
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fa34 	bl	8000ba8 <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff f927 	bl	8000998 <__addsf3>
 800174a:	4603      	mov	r3, r0
 800174c:	4929      	ldr	r1, [pc, #164]	; (80017f4 <timerEventHandler+0x504>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa2a 	bl	8000ba8 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <timerEventHandler+0x518>)
 800175a:	601a      	str	r2, [r3, #0]
	 CH2O=(E_H2O_660_*Ua_660nm+E_H2O_880_*Ua_880nm+E_H2O_940_*Ua_940nm)*18;
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <timerEventHandler+0x51c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <timerEventHandler+0x4f4>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa1e 	bl	8000ba8 <__aeabi_fmul>
 800176c:	4603      	mov	r3, r0
 800176e:	461c      	mov	r4, r3
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <timerEventHandler+0x520>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <timerEventHandler+0x4fc>)
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa14 	bl	8000ba8 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff f907 	bl	8000998 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	461c      	mov	r4, r3
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <timerEventHandler+0x524>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <timerEventHandler+0x4ec>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fa05 	bl	8000ba8 <__aeabi_fmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff f8f8 	bl	8000998 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	491b      	ldr	r1, [pc, #108]	; (8001818 <timerEventHandler+0x528>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f9fb 	bl	8000ba8 <__aeabi_fmul>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <timerEventHandler+0x52c>)
 80017b8:	601a      	str	r2, [r3, #0]
}
	// here we will cound Hb concentrations

}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	374bc6a8 	.word	0x374bc6a8
 80017cc:	bfe04189 	.word	0xbfe04189
 80017d0:	2000011c 	.word	0x2000011c
 80017d4:	200000c8 	.word	0x200000c8
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	2000013c 	.word	0x2000013c
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200000d4 	.word	0x200000d4
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000134 	.word	0x20000134
 80017f0:	20000018 	.word	0x20000018
 80017f4:	4782dc00 	.word	0x4782dc00
 80017f8:	200000c0 	.word	0x200000c0
 80017fc:	20000004 	.word	0x20000004
 8001800:	20000010 	.word	0x20000010
 8001804:	2000001c 	.word	0x2000001c
 8001808:	200000e8 	.word	0x200000e8
 800180c:	20000008 	.word	0x20000008
 8001810:	20000014 	.word	0x20000014
 8001814:	20000020 	.word	0x20000020
 8001818:	41900000 	.word	0x41900000
 800181c:	200000d0 	.word	0x200000d0

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
//	  HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
	    HAL_Delay(250);
 8001828:	20fa      	movs	r0, #250	; 0xfa
 800182a:	f000 f96f 	bl	8001b0c <HAL_Delay>
 800182e:	e7fb      	b.n	8001828 <Error_Handler+0x8>

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_MspInit+0x5c>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_MspInit+0x5c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_MspInit+0x5c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_MspInit+0x5c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_MspInit+0x60>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_MspInit+0x60>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <HAL_ADC_MspInit+0x98>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d137      	bne.n	8001924 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_ADC_MspInit+0x9c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018fc:	23ff      	movs	r3, #255	; 0xff
 80018fe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001900:	2303      	movs	r3, #3
 8001902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4619      	mov	r1, r3
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <HAL_ADC_MspInit+0xa0>)
 800190c:	f000 fedc 	bl	80026c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001914:	2303      	movs	r3, #3
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <HAL_ADC_MspInit+0xa4>)
 8001920:	f000 fed2 	bl	80026c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40012400 	.word	0x40012400
 8001930:	40021000 	.word	0x40021000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_TIM_Base_MspInit+0x44>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d113      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_TIM_Base_MspInit+0x48>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_TIM_Base_MspInit+0x48>)
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	6193      	str	r3, [r2, #24]
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_TIM_Base_MspInit+0x48>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2019      	movs	r0, #25
 800196c:	f000 fe75 	bl	800265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001970:	2019      	movs	r0, #25
 8001972:	f000 fe8e 	bl	8002692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f881 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	timerUpCallBack();
 80019dc:	f7ff fc6e 	bl	80012bc <timerUpCallBack>

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM1_UP_IRQHandler+0x14>)
 80019e2:	f001 fe17 	bl	8003614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000140 	.word	0x20000140

080019f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019fe:	e003      	b.n	8001a08 <LoopCopyDataInit>

08001a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a06:	3104      	adds	r1, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a08:	480a      	ldr	r0, [pc, #40]	; (8001a34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a10:	d3f6      	bcc.n	8001a00 <CopyDataInit>
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a14:	e002      	b.n	8001a1c <LoopFillZerobss>

08001a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a18:	f842 3b04 	str.w	r3, [r2], #4

08001a1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a20:	d3f9      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a22:	f7ff ffe5 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f002 fa77 	bl	8003f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2a:	f7ff fac1 	bl	8000fb0 <main>
  bx lr
 8001a2e:	4770      	bx	lr
  ldr r3, =_sidata
 8001a30:	0800427c 	.word	0x0800427c
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a38:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8001a3c:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8001a40:	200001a0 	.word	0x200001a0

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>
	...

08001a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x28>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x28>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 fdf3 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fee4 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe0b 	bl	80026ae <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 fdd3 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000024 	.word	0x20000024
 8001acc:	2000002c 	.word	0x2000002c
 8001ad0:	20000028 	.word	0x20000028

08001ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x1c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_IncTick+0x20>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	2000002c 	.word	0x2000002c
 8001af4:	2000019c 	.word	0x2000019c

08001af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <HAL_GetTick+0x10>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	2000019c 	.word	0x2000019c

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffe0 	bl	8001af8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000002c 	.word	0x2000002c

08001b54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0be      	b.n	8001cf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fe7e 	bl	8001894 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fbb1 	bl	8002300 <ADC_ConversionStop_Disable>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 8099 	bne.w	8001ce2 <HAL_ADC_Init+0x18e>
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 8095 	bne.w	8001ce2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f043 0202 	orr.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b1b      	ldrb	r3, [r3, #12]
 8001bda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bec:	d003      	beq.n	8001bf6 <HAL_ADC_Init+0xa2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_ADC_Init+0xa8>
 8001bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfa:	e000      	b.n	8001bfe <HAL_ADC_Init+0xaa>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d1b      	ldrb	r3, [r3, #20]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d119      	bne.n	8001c40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7b1b      	ldrb	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	035a      	lsls	r2, r3, #13
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e00b      	b.n	8001c40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <HAL_ADC_Init+0x1a8>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_Init+0x126>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d104      	bne.n	8001c84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	051b      	lsls	r3, r3, #20
 8001c82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_ADC_Init+0x1ac>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cbe:	e018      	b.n	8001cf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f023 0312 	bic.w	r3, r3, #18
 8001cc8:	f043 0210 	orr.w	r2, r3, #16
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce0:	e007      	b.n	8001cf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	ffe1f7fd 	.word	0xffe1f7fd
 8001d00:	ff1f0efe 	.word	0xff1f0efe

08001d04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Start+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e098      	b.n	8001e50 <HAL_ADC_Start+0x14c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fa98 	bl	800225c <ADC_Enable>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8087 	bne.w	8001e46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a41      	ldr	r2, [pc, #260]	; (8001e58 <HAL_ADC_Start+0x154>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d105      	bne.n	8001d62 <HAL_ADC_Start+0x5e>
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_ADC_Start+0x158>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d026      	beq.n	8001dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d8c:	e01d      	b.n	8001dca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <HAL_ADC_Start+0x158>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_ADC_Start+0xaa>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_ADC_Start+0x154>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_ADC_Start+0xc6>
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_ADC_Start+0x158>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f023 0206 	bic.w	r2, r3, #6
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001de2:	e002      	b.n	8001dea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0202 	mvn.w	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e0a:	d113      	bne.n	8001e34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_ADC_Start+0x154>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_ADC_Start+0x158>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d108      	bne.n	8001e34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	e00c      	b.n	8001e4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	e003      	b.n	8001e4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012800 	.word	0x40012800
 8001e5c:	40012400 	.word	0x40012400

08001e60 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e76:	f7ff fe3f 	bl	8001af8 <HAL_GetTick>
 8001e7a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f043 0220 	orr.w	r2, r3, #32
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0c8      	b.n	8002034 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12a      	bne.n	8001f06 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d123      	bne.n	8001f06 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ebe:	e01a      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d016      	beq.n	8001ef6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_ADC_PollForConversion+0x7e>
 8001ece:	f7ff fe13 	bl	8001af8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d20b      	bcs.n	8001ef6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f043 0204 	orr.w	r2, r3, #4
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e09e      	b.n	8002034 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0dd      	beq.n	8001ec0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f04:	e06c      	b.n	8001fe0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f06:	4b4d      	ldr	r3, [pc, #308]	; (800203c <HAL_ADC_PollForConversion+0x1dc>)
 8001f08:	681c      	ldr	r4, [r3, #0]
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f001 fa1c 	bl	8003348 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f10:	4603      	mov	r3, r0
 8001f12:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6919      	ldr	r1, [r3, #16]
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_ADC_PollForConversion+0x1e0>)
 8001f1e:	400b      	ands	r3, r1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d118      	bne.n	8001f56 <HAL_ADC_PollForConversion+0xf6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	4b46      	ldr	r3, [pc, #280]	; (8002044 <HAL_ADC_PollForConversion+0x1e4>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d111      	bne.n	8001f56 <HAL_ADC_PollForConversion+0xf6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_ADC_PollForConversion+0x1e8>)
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <HAL_ADC_PollForConversion+0xf2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68d9      	ldr	r1, [r3, #12]
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_ADC_PollForConversion+0x1ec>)
 8001f48:	400b      	ands	r3, r1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_PollForConversion+0xf2>
 8001f4e:	2314      	movs	r3, #20
 8001f50:	e020      	b.n	8001f94 <HAL_ADC_PollForConversion+0x134>
 8001f52:	2329      	movs	r3, #41	; 0x29
 8001f54:	e01e      	b.n	8001f94 <HAL_ADC_PollForConversion+0x134>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_ADC_PollForConversion+0x1e8>)
 8001f5e:	400b      	ands	r3, r1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x112>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68d9      	ldr	r1, [r3, #12]
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_ADC_PollForConversion+0x1ec>)
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_ADC_PollForConversion+0x12e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6919      	ldr	r1, [r3, #16]
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_ADC_PollForConversion+0x1f0>)
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d108      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x132>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <HAL_ADC_PollForConversion+0x1f0>)
 8001f88:	400b      	ands	r3, r1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x132>
 8001f8e:	2354      	movs	r3, #84	; 0x54
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_PollForConversion+0x134>
 8001f92:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f9a:	e01d      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d016      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_ADC_PollForConversion+0x15a>
 8001faa:	f7ff fda5 	bl	8001af8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d20b      	bcs.n	8001fd2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e030      	b.n	8002034 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8dd      	bhi.n	8001f9c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0212 	mvn.w	r2, #18
 8001fe8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002000:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002004:	d115      	bne.n	8002032 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800200a:	2b00      	cmp	r3, #0
 800200c:	d111      	bne.n	8002032 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	20000024 	.word	0x20000024
 8002040:	24924924 	.word	0x24924924
 8002044:	00924924 	.word	0x00924924
 8002048:	12492492 	.word	0x12492492
 800204c:	00492492 	.word	0x00492492
 8002050:	00249249 	.word	0x00249249

08002054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x20>
 8002088:	2302      	movs	r3, #2
 800208a:	e0dc      	b.n	8002246 <HAL_ADC_ConfigChannel+0x1da>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b06      	cmp	r3, #6
 800209a:	d81c      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b05      	subs	r3, #5
 80020ae:	221f      	movs	r2, #31
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4019      	ands	r1, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b05      	subs	r3, #5
 80020c8:	fa00 f203 	lsl.w	r2, r0, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
 80020d4:	e03c      	b.n	8002150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d81c      	bhi.n	8002118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b23      	subs	r3, #35	; 0x23
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4019      	ands	r1, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b23      	subs	r3, #35	; 0x23
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
 8002116:	e01b      	b.n	8002150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3b41      	subs	r3, #65	; 0x41
 800212a:	221f      	movs	r2, #31
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	4019      	ands	r1, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	3b41      	subs	r3, #65	; 0x41
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d91c      	bls.n	8002192 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	4019      	ands	r1, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6898      	ldr	r0, [r3, #8]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	3b1e      	subs	r3, #30
 8002184:	fa00 f203 	lsl.w	r2, r0, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	e019      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	2207      	movs	r2, #7
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4019      	ands	r1, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6898      	ldr	r0, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d003      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d2:	2b11      	cmp	r3, #17
 80021d4:	d132      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_ADC_ConfigChannel+0x1e4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d125      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d126      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d11a      	bne.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_ADC_ConfigChannel+0x1e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <HAL_ADC_ConfigChannel+0x1ec>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9a      	lsrs	r2, r3, #18
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800221c:	e002      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1b2>
 800222a:	e007      	b.n	800223c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40012400 	.word	0x40012400
 8002254:	20000024 	.word	0x20000024
 8002258:	431bde83 	.word	0x431bde83

0800225c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d039      	beq.n	80022ee <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <ADC_Enable+0x9c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <ADC_Enable+0xa0>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	0c9b      	lsrs	r3, r3, #18
 8002296:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002298:	e002      	b.n	80022a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a6:	f7ff fc27 	bl	8001af8 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ac:	e018      	b.n	80022e0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ae:	f7ff fc23 	bl	8001af8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d911      	bls.n	80022e0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d1df      	bne.n	80022ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000024 	.word	0x20000024
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d127      	bne.n	800236a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800232a:	f7ff fbe5 	bl	8001af8 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002330:	e014      	b.n	800235c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002332:	f7ff fbe1 	bl	8001af8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d90d      	bls.n	800235c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d0e3      	beq.n	8002332 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADCEx_Calibration_Start+0x1e>
 800238e:	2302      	movs	r3, #2
 8002390:	e086      	b.n	80024a0 <HAL_ADCEx_Calibration_Start+0x12c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffb0 	bl	8002300 <ADC_ConversionStop_Disable>
 80023a0:	4603      	mov	r3, r0
 80023a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d175      	bne.n	8002496 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b2:	f023 0302 	bic.w	r3, r3, #2
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_ADCEx_Calibration_Start+0x134>)
 80023c0:	681c      	ldr	r4, [r3, #0]
 80023c2:	2002      	movs	r0, #2
 80023c4:	f000 ffc0 	bl	8003348 <HAL_RCCEx_GetPeriphCLKFreq>
 80023c8:	4603      	mov	r3, r0
 80023ca:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80023ce:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80023d0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80023d2:	e002      	b.n	80023da <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff3b 	bl	800225c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0208 	orr.w	r2, r2, #8
 80023f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023f6:	f7ff fb7f 	bl	8001af8 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023fc:	e014      	b.n	8002428 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023fe:	f7ff fb7b 	bl	8001af8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b0a      	cmp	r3, #10
 800240a:	d90d      	bls.n	8002428 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f023 0312 	bic.w	r3, r3, #18
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e03b      	b.n	80024a0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e3      	bne.n	80023fe <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002446:	f7ff fb57 	bl	8001af8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800244c:	e014      	b.n	8002478 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800244e:	f7ff fb53 	bl	8001af8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b0a      	cmp	r3, #10
 800245a:	d90d      	bls.n	8002478 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f023 0312 	bic.w	r3, r3, #18
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e013      	b.n	80024a0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e3      	bne.n	800244e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800249e:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	20000024 	.word	0x20000024

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <__NVIC_EnableIRQ+0x34>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff90 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff2d 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff42 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff90 	bl	800259c <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5f 	bl	8002548 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff35 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa2 	bl	8002600 <SysTick_Config>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08b      	sub	sp, #44	; 0x2c
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	e169      	b.n	80029b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026dc:	2201      	movs	r2, #1
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8158 	bne.w	80029aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a9a      	ldr	r2, [pc, #616]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d05e      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002704:	4a98      	ldr	r2, [pc, #608]	; (8002968 <HAL_GPIO_Init+0x2a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d875      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800270a:	4a98      	ldr	r2, [pc, #608]	; (800296c <HAL_GPIO_Init+0x2a4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d058      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002710:	4a96      	ldr	r2, [pc, #600]	; (800296c <HAL_GPIO_Init+0x2a4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d86f      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002716:	4a96      	ldr	r2, [pc, #600]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d052      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 800271c:	4a94      	ldr	r2, [pc, #592]	; (8002970 <HAL_GPIO_Init+0x2a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d869      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002722:	4a94      	ldr	r2, [pc, #592]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04c      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002728:	4a92      	ldr	r2, [pc, #584]	; (8002974 <HAL_GPIO_Init+0x2ac>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d863      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800272e:	4a92      	ldr	r2, [pc, #584]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d046      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
 8002734:	4a90      	ldr	r2, [pc, #576]	; (8002978 <HAL_GPIO_Init+0x2b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d85d      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 800273a:	2b12      	cmp	r3, #18
 800273c:	d82a      	bhi.n	8002794 <HAL_GPIO_Init+0xcc>
 800273e:	2b12      	cmp	r3, #18
 8002740:	d859      	bhi.n	80027f6 <HAL_GPIO_Init+0x12e>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <HAL_GPIO_Init+0x80>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	080027c3 	.word	0x080027c3
 800274c:	0800279d 	.word	0x0800279d
 8002750:	080027af 	.word	0x080027af
 8002754:	080027f1 	.word	0x080027f1
 8002758:	080027f7 	.word	0x080027f7
 800275c:	080027f7 	.word	0x080027f7
 8002760:	080027f7 	.word	0x080027f7
 8002764:	080027f7 	.word	0x080027f7
 8002768:	080027f7 	.word	0x080027f7
 800276c:	080027f7 	.word	0x080027f7
 8002770:	080027f7 	.word	0x080027f7
 8002774:	080027f7 	.word	0x080027f7
 8002778:	080027f7 	.word	0x080027f7
 800277c:	080027f7 	.word	0x080027f7
 8002780:	080027f7 	.word	0x080027f7
 8002784:	080027f7 	.word	0x080027f7
 8002788:	080027f7 	.word	0x080027f7
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027b9 	.word	0x080027b9
 8002794:	4a79      	ldr	r2, [pc, #484]	; (800297c <HAL_GPIO_Init+0x2b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800279a:	e02c      	b.n	80027f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e029      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	3304      	adds	r3, #4
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e024      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	3308      	adds	r3, #8
 80027b4:	623b      	str	r3, [r7, #32]
          break;
 80027b6:	e01f      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	330c      	adds	r3, #12
 80027be:	623b      	str	r3, [r7, #32]
          break;
 80027c0:	e01a      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ca:	2304      	movs	r3, #4
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e013      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d8:	2308      	movs	r3, #8
 80027da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	611a      	str	r2, [r3, #16]
          break;
 80027e2:	e009      	b.n	80027f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e4:	2308      	movs	r3, #8
 80027e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	615a      	str	r2, [r3, #20]
          break;
 80027ee:	e003      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
          break;
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x130>
          break;
 80027f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d801      	bhi.n	8002802 <HAL_GPIO_Init+0x13a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e001      	b.n	8002806 <HAL_GPIO_Init+0x13e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d802      	bhi.n	8002814 <HAL_GPIO_Init+0x14c>
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x152>
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	3b08      	subs	r3, #8
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	210f      	movs	r1, #15
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	431a      	orrs	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80b1 	beq.w	80029aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x2b8>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002860:	4a48      	ldr	r2, [pc, #288]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_GPIO_Init+0x2c0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1ec>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_GPIO_Init+0x2c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1e8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <HAL_GPIO_Init+0x2c8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1e4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1e0>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e006      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e004      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e002      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_GPIO_Init+0x1ee>
 80028b4:	2300      	movs	r3, #0
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	0092      	lsls	r2, r2, #2
 80028be:	4093      	lsls	r3, r2
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028c6:	492f      	ldr	r1, [pc, #188]	; (8002984 <HAL_GPIO_Init+0x2bc>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	089b      	lsrs	r3, r3, #2
 80028cc:	3302      	adds	r3, #2
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4928      	ldr	r1, [pc, #160]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	43db      	mvns	r3, r3
 800291e:	491e      	ldr	r1, [pc, #120]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002920:	4013      	ands	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4918      	ldr	r1, [pc, #96]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4914      	ldr	r1, [pc, #80]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e021      	b.n	80029aa <HAL_GPIO_Init+0x2e2>
 8002966:	bf00      	nop
 8002968:	10320000 	.word	0x10320000
 800296c:	10310000 	.word	0x10310000
 8002970:	10220000 	.word	0x10220000
 8002974:	10210000 	.word	0x10210000
 8002978:	10120000 	.word	0x10120000
 800297c:	10110000 	.word	0x10110000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_GPIO_Init+0x304>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4909      	ldr	r1, [pc, #36]	; (80029cc <HAL_GPIO_Init+0x304>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	3301      	adds	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f47f ae8e 	bne.w	80026dc <HAL_GPIO_Init+0x14>
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	372c      	adds	r7, #44	; 0x2c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40010400 	.word	0x40010400

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e26c      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8087 	beq.w	8002afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f0:	4b92      	ldr	r3, [pc, #584]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029fc:	4b8f      	ldr	r3, [pc, #572]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d112      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5e>
 8002a08:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d10b      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d06c      	beq.n	8002afc <HAL_RCC_OscConfig+0x12c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d168      	bne.n	8002afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e246      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a36:	d106      	bne.n	8002a46 <HAL_RCC_OscConfig+0x76>
 8002a38:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7f      	ldr	r2, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e02e      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b78      	ldr	r3, [pc, #480]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a77      	ldr	r2, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0xbc>
 8002a72:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a71      	ldr	r2, [pc, #452]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6e      	ldr	r2, [pc, #440]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xd4>
 8002a8c:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6a      	ldr	r2, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff f824 	bl	8001af8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff f820 	bl	8001af8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1fa      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xe4>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff f810 	bl	8001af8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff f80c 	bl	8001af8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1e6      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x10c>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0a:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b16:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x18c>
 8002b22:	4b46      	ldr	r3, [pc, #280]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x176>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1ba      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4939      	ldr	r1, [pc, #228]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe ffc5 	bl	8001af8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe ffc1 	bl	8001af8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e19b      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4927      	ldr	r1, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe ffa4 	bl	8001af8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7fe ffa0 	bl	8001af8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e17a      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03a      	beq.n	8002c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d019      	beq.n	8002c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_RCC_OscConfig+0x274>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fe ff84 	bl	8001af8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7fe ff80 	bl	8001af8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e15a      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c12:	2001      	movs	r0, #1
 8002c14:	f000 fac4 	bl	80031a0 <RCC_Delay>
 8002c18:	e01c      	b.n	8002c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fe ff6a 	bl	8001af8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c26:	e00f      	b.n	8002c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe ff66 	bl	8001af8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d908      	bls.n	8002c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e140      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	42420000 	.word	0x42420000
 8002c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	4b9e      	ldr	r3, [pc, #632]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e9      	bne.n	8002c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a6 	beq.w	8002dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10d      	bne.n	8002c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b94      	ldr	r3, [pc, #592]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a93      	ldr	r2, [pc, #588]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	61d3      	str	r3, [r2, #28]
 8002c7e:	4b91      	ldr	r3, [pc, #580]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d118      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9a:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a8a      	ldr	r2, [pc, #552]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe ff27 	bl	8001af8 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fe ff23 	bl	8001af8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0fd      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <HAL_RCC_OscConfig+0x4f8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d106      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x312>
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	e02d      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x334>
 8002cea:	4b76      	ldr	r3, [pc, #472]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a75      	ldr	r2, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a72      	ldr	r2, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
 8002d02:	e01c      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x356>
 8002d0c:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a6c      	ldr	r2, [pc, #432]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x36e>
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b64      	ldr	r3, [pc, #400]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d015      	beq.n	8002d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fed7 	bl	8001af8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fed3 	bl	8001af8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ab      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ee      	beq.n	8002d4e <HAL_RCC_OscConfig+0x37e>
 8002d70:	e014      	b.n	8002d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fec1 	bl	8001af8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe febd 	bl	8001af8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e095      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ee      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8081 	beq.w	8002eba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d061      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d146      	bne.n	8002e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fe91 	bl	8001af8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe fe8d 	bl	8001af8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e067      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e00:	d108      	bne.n	8002e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	492d      	ldr	r1, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a19      	ldr	r1, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	430b      	orrs	r3, r1
 8002e26:	4927      	ldr	r1, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fe61 	bl	8001af8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fe fe5d 	bl	8001af8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e037      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46a>
 8002e58:	e02f      	b.n	8002eba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_RCC_OscConfig+0x4fc>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fe4a 	bl	8001af8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe fe46 	bl	8001af8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e020      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x498>
 8002e86:	e018      	b.n	8002eba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e013      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42420060 	.word	0x42420060

08002ed0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d0      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0207 	bic.w	r2, r3, #7
 8002efa:	4965      	ldr	r1, [pc, #404]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d040      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d115      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e073      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06b      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4936      	ldr	r1, [pc, #216]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fd9a 	bl	8001af8 <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc8:	f7fe fd96 	bl	8001af8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e053      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 020c 	and.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d1eb      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d210      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0207 	bic.w	r2, r3, #7
 8003006:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f821 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1cc>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fcf8 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
 8003098:	08004258 	.word	0x08004258
 800309c:	20000024 	.word	0x20000024
 80030a0:	20000028 	.word	0x20000028

080030a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030ac:	1d3c      	adds	r4, r7, #4
 80030ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b4:	f240 2301 	movw	r3, #513	; 0x201
 80030b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x46>
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f6:	4413      	add	r3, r2
 80030f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c5b      	lsrs	r3, r3, #17
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003116:	4413      	add	r3, r2
 8003118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800311c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	4a0e      	ldr	r2, [pc, #56]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	fb02 f203 	mul.w	r2, r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e004      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	623b      	str	r3, [r7, #32]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6a3b      	ldr	r3, [r7, #32]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc90      	pop	{r4, r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	08004238 	.word	0x08004238
 8003158:	40021000 	.word	0x40021000
 800315c:	007a1200 	.word	0x007a1200
 8003160:	003d0900 	.word	0x003d0900

08003164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <HAL_RCC_GetHCLKFreq+0x10>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000024 	.word	0x20000024

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800317c:	f7ff fff2 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	08004268 	.word	0x08004268

080031a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <RCC_Delay+0x34>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <RCC_Delay+0x38>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0a5b      	lsrs	r3, r3, #9
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031bc:	bf00      	nop
  }
  while (Delay --);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	60fa      	str	r2, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f9      	bne.n	80031bc <RCC_Delay+0x1c>
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000024 	.word	0x20000024
 80031d8:	10624dd3 	.word	0x10624dd3

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d07d      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fc:	4b4f      	ldr	r3, [pc, #316]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	61d3      	str	r3, [r2, #28]
 8003214:	4b49      	ldr	r3, [pc, #292]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	4b46      	ldr	r3, [pc, #280]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d118      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003230:	4b43      	ldr	r3, [pc, #268]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323c:	f7fe fc5c 	bl	8001af8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fc58 	bl	8001af8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e06d      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003262:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02e      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d027      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003280:	4b2e      	ldr	r3, [pc, #184]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003290:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003296:	4a29      	ldr	r2, [pc, #164]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d014      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fc27 	bl	8001af8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fc23 	bl	8001af8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e036      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ee      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4917      	ldr	r1, [pc, #92]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	490b      	ldr	r1, [pc, #44]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4904      	ldr	r1, [pc, #16]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	42420440 	.word	0x42420440

08003348 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b08d      	sub	sp, #52	; 0x34
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003350:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003352:	f107 040c 	add.w	r4, r7, #12
 8003356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800335c:	f240 2301 	movw	r3, #513	; 0x201
 8003360:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	2300      	movs	r3, #0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b10      	cmp	r3, #16
 8003380:	f200 8091 	bhi.w	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d04c      	beq.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d07c      	beq.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003390:	e089      	b.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003392:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003398:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8082 	beq.w	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033b2:	4413      	add	r3, r2
 80033b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033b8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d018      	beq.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033c4:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c5b      	lsrs	r3, r3, #17
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033d2:	4413      	add	r3, r2
 80033d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033e4:	4a37      	ldr	r2, [pc, #220]	; (80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	4a33      	ldr	r2, [pc, #204]	; (80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003400:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d102      	bne.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003412:	e04a      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003422:	e042      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003434:	d108      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	e01f      	b.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003452:	d109      	bne.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003460:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	e00f      	b.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003472:	d11c      	bne.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003480:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003486:	e012      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003488:	e011      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800348a:	f7ff fe75 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0b9b      	lsrs	r3, r3, #14
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80034ae:	bf00      	nop
    }
  }
  return (frequency);
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3734      	adds	r7, #52	; 0x34
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	08004248 	.word	0x08004248
 80034c0:	40021000 	.word	0x40021000
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	003d0900 	.word	0x003d0900
 80034cc:	aaaaaaab 	.word	0xaaaaaaab

080034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fa20 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fa7a 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e03a      	b.n	80035fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIM_Base_Start_IT+0x98>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_TIM_Base_Start_IT+0x9c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x58>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_TIM_Base_Start_IT+0xa0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d111      	bne.n	80035ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d010      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e007      	b.n	80035fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800

08003614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d122      	bne.n	8003670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d11b      	bne.n	8003670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0202 	mvn.w	r2, #2
 8003640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f9ba 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 800365c:	e005      	b.n	800366a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9ad 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f9bc 	bl	80039e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d122      	bne.n	80036c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0204 	mvn.w	r2, #4
 8003694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f990 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 80036b0:	e005      	b.n	80036be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f983 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f992 	bl	80039e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d122      	bne.n	8003718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d11b      	bne.n	8003718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0208 	mvn.w	r2, #8
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2204      	movs	r2, #4
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f966 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f959 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f968 	bl	80039e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b10      	cmp	r3, #16
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0210 	mvn.w	r2, #16
 800373c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2208      	movs	r2, #8
 8003742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f93c 	bl	80039d0 <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f92f 	bl	80039be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f93e 	bl	80039e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10e      	bne.n	8003798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0201 	mvn.w	r2, #1
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f90a 	bl	80039ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d10e      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d107      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa81 	bl	8003cc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b40      	cmp	r3, #64	; 0x40
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d107      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f902 	bl	80039f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b20      	cmp	r3, #32
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0220 	mvn.w	r2, #32
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa4c 	bl	8003cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIM_ConfigClockSource+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e0b3      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x180>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800385a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003862:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003874:	d03e      	beq.n	80038f4 <HAL_TIM_ConfigClockSource+0xd0>
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387a:	f200 8087 	bhi.w	800398c <HAL_TIM_ConfigClockSource+0x168>
 800387e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003882:	f000 8085 	beq.w	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	d87f      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 800388c:	2b70      	cmp	r3, #112	; 0x70
 800388e:	d01a      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0xa2>
 8003890:	2b70      	cmp	r3, #112	; 0x70
 8003892:	d87b      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 8003894:	2b60      	cmp	r3, #96	; 0x60
 8003896:	d050      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x116>
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d877      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 800389c:	2b50      	cmp	r3, #80	; 0x50
 800389e:	d03c      	beq.n	800391a <HAL_TIM_ConfigClockSource+0xf6>
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d873      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d058      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x136>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d86f      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 80038ac:	2b30      	cmp	r3, #48	; 0x30
 80038ae:	d064      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x156>
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d86b      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d060      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x156>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d867      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x168>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05c      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x156>
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d05a      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038c4:	e062      	b.n	800398c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f000 f970 	bl	8003bba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	609a      	str	r2, [r3, #8]
      break;
 80038f2:	e04e      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6899      	ldr	r1, [r3, #8]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f000 f959 	bl	8003bba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003916:	609a      	str	r2, [r3, #8]
      break;
 8003918:	e03b      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	461a      	mov	r2, r3
 8003928:	f000 f8d0 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2150      	movs	r1, #80	; 0x50
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f927 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003938:	e02b      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f000 f8ee 	bl	8003b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2160      	movs	r1, #96	; 0x60
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f917 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003958:	e01b      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	461a      	mov	r2, r3
 8003968:	f000 f8b0 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2140      	movs	r1, #64	; 0x40
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f907 	bl	8003b86 <TIM_ITRx_SetConfig>
      break;
 8003978:	e00b      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f000 f8fe 	bl	8003b86 <TIM_ITRx_SetConfig>
        break;
 800398a:	e002      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
	...

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <TIM_Base_SetConfig+0xb8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <TIM_Base_SetConfig+0xbc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0x30>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <TIM_Base_SetConfig+0xc0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <TIM_Base_SetConfig+0xb8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <TIM_Base_SetConfig+0xbc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <TIM_Base_SetConfig+0xc0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <TIM_Base_SetConfig+0xb8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800

08003acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 030a 	bic.w	r3, r3, #10
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f023 0210 	bic.w	r2, r3, #16
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	031b      	lsls	r3, r3, #12
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f043 0307 	orr.w	r3, r3, #7
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	609a      	str	r2, [r3, #8]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e046      	b.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00e      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10c      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800

08003cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <LL_GPIO_SetPinMode>:
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	4413      	add	r3, r2
 8003cee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	210f      	movs	r1, #15
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	6023      	str	r3, [r4, #0]
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc90      	pop	{r4, r7}
 8003d3a:	4770      	bx	lr

08003d3c <LL_GPIO_SetPinSpeed>:
{
 8003d3c:	b490      	push	{r4, r7}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0e1b      	lsrs	r3, r3, #24
 8003d50:	4413      	add	r3, r2
 8003d52:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	613b      	str	r3, [r7, #16]
  return result;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	2103      	movs	r1, #3
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	401a      	ands	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	61bb      	str	r3, [r7, #24]
  return result;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	6023      	str	r3, [r4, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc90      	pop	{r4, r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_GPIO_SetPinOutputType>:
{
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0e1b      	lsrs	r3, r3, #24
 8003db4:	4413      	add	r3, r2
 8003db6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	613b      	str	r3, [r7, #16]
  return result;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	2104      	movs	r1, #4
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	401a      	ands	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	61bb      	str	r3, [r7, #24]
  return result;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	6023      	str	r3, [r4, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc90      	pop	{r4, r7}
 8003e02:	4770      	bx	lr

08003e04 <LL_GPIO_SetPinPull>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	613b      	str	r3, [r7, #16]
  return result;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	408b      	lsls	r3, r1
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	60da      	str	r2, [r3, #12]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	60fb      	str	r3, [r7, #12]
  return result;
 8003e68:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003e72:	e040      	b.n	8003ef6 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003e74:	2201      	movs	r2, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b07      	cmp	r3, #7
 8003e86:	d806      	bhi.n	8003e96 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003e88:	f240 1201 	movw	r2, #257	; 0x101
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	e008      	b.n	8003ea8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3b08      	subs	r3, #8
 8003e9a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea6:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	461a      	mov	r2, r3
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ffa7 	bl	8003e04 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ff0a 	bl	8003cd8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d003      	beq.n	8003ed4 <LL_GPIO_Init+0x8c>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d10d      	bne.n	8003ef0 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff2d 	bl	8003d3c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ff58 	bl	8003da0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1b8      	bne.n	8003e74 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <__errno>:
 8003f0c:	4b01      	ldr	r3, [pc, #4]	; (8003f14 <__errno+0x8>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000030 	.word	0x20000030

08003f18 <__libc_init_array>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	4d0c      	ldr	r5, [pc, #48]	; (8003f50 <__libc_init_array+0x38>)
 8003f1e:	4c0d      	ldr	r4, [pc, #52]	; (8003f54 <__libc_init_array+0x3c>)
 8003f20:	1b64      	subs	r4, r4, r5
 8003f22:	10a4      	asrs	r4, r4, #2
 8003f24:	42a6      	cmp	r6, r4
 8003f26:	d109      	bne.n	8003f3c <__libc_init_array+0x24>
 8003f28:	f000 f97a 	bl	8004220 <_init>
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	4d0a      	ldr	r5, [pc, #40]	; (8003f58 <__libc_init_array+0x40>)
 8003f30:	4c0a      	ldr	r4, [pc, #40]	; (8003f5c <__libc_init_array+0x44>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	42a6      	cmp	r6, r4
 8003f38:	d105      	bne.n	8003f46 <__libc_init_array+0x2e>
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f40:	4798      	blx	r3
 8003f42:	3601      	adds	r6, #1
 8003f44:	e7ee      	b.n	8003f24 <__libc_init_array+0xc>
 8003f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4a:	4798      	blx	r3
 8003f4c:	3601      	adds	r6, #1
 8003f4e:	e7f2      	b.n	8003f36 <__libc_init_array+0x1e>
 8003f50:	08004274 	.word	0x08004274
 8003f54:	08004274 	.word	0x08004274
 8003f58:	08004274 	.word	0x08004274
 8003f5c:	08004278 	.word	0x08004278

08003f60 <memset>:
 8003f60:	4603      	mov	r3, r0
 8003f62:	4402      	add	r2, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d100      	bne.n	8003f6a <memset+0xa>
 8003f68:	4770      	bx	lr
 8003f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6e:	e7f9      	b.n	8003f64 <memset+0x4>

08003f70 <logf>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4604      	mov	r4, r0
 8003f74:	f000 f82c 	bl	8003fd0 <__ieee754_logf>
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <logf+0x54>)
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f80:	3301      	adds	r3, #1
 8003f82:	d013      	beq.n	8003fac <logf+0x3c>
 8003f84:	4621      	mov	r1, r4
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7fc ffd4 	bl	8000f34 <__aeabi_fcmpun>
 8003f8c:	b970      	cbnz	r0, 8003fac <logf+0x3c>
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7fc ffc5 	bl	8000f20 <__aeabi_fcmpgt>
 8003f96:	b948      	cbnz	r0, 8003fac <logf+0x3c>
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7fc ff98 	bl	8000ed0 <__aeabi_fcmpeq>
 8003fa0:	b130      	cbz	r0, 8003fb0 <logf+0x40>
 8003fa2:	f7ff ffb3 	bl	8003f0c <__errno>
 8003fa6:	2322      	movs	r3, #34	; 0x22
 8003fa8:	4d07      	ldr	r5, [pc, #28]	; (8003fc8 <logf+0x58>)
 8003faa:	6003      	str	r3, [r0, #0]
 8003fac:	4628      	mov	r0, r5
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	f7ff ffac 	bl	8003f0c <__errno>
 8003fb4:	2321      	movs	r3, #33	; 0x21
 8003fb6:	6003      	str	r3, [r0, #0]
 8003fb8:	4804      	ldr	r0, [pc, #16]	; (8003fcc <logf+0x5c>)
 8003fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fbe:	f000 b92b 	b.w	8004218 <nanf>
 8003fc2:	bf00      	nop
 8003fc4:	20000094 	.word	0x20000094
 8003fc8:	ff800000 	.word	0xff800000
 8003fcc:	08004270 	.word	0x08004270

08003fd0 <__ieee754_logf>:
 8003fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	4601      	mov	r1, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	d106      	bne.n	8003fec <__ieee754_logf+0x1c>
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8003fe4:	f7fc fe94 	bl	8000d10 <__aeabi_fdiv>
 8003fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fec:	2800      	cmp	r0, #0
 8003fee:	da03      	bge.n	8003ff8 <__ieee754_logf+0x28>
 8003ff0:	f7fc fcd0 	bl	8000994 <__aeabi_fsub>
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	e7f5      	b.n	8003fe4 <__ieee754_logf+0x14>
 8003ff8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8003ffc:	db02      	blt.n	8004004 <__ieee754_logf+0x34>
 8003ffe:	f7fc fccb 	bl	8000998 <__addsf3>
 8004002:	e7f1      	b.n	8003fe8 <__ieee754_logf+0x18>
 8004004:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004008:	da35      	bge.n	8004076 <__ieee754_logf+0xa6>
 800400a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800400e:	f7fc fdcb 	bl	8000ba8 <__aeabi_fmul>
 8004012:	f06f 0218 	mvn.w	r2, #24
 8004016:	4603      	mov	r3, r0
 8004018:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800401c:	15de      	asrs	r6, r3, #23
 800401e:	4b71      	ldr	r3, [pc, #452]	; (80041e4 <__ieee754_logf+0x214>)
 8004020:	3e7f      	subs	r6, #127	; 0x7f
 8004022:	4423      	add	r3, r4
 8004024:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8004028:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800402c:	4416      	add	r6, r2
 800402e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004032:	4320      	orrs	r0, r4
 8004034:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8004038:	f7fc fcac 	bl	8000994 <__aeabi_fsub>
 800403c:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <__ieee754_logf+0x218>)
 800403e:	f104 020f 	add.w	r2, r4, #15
 8004042:	4013      	ands	r3, r2
 8004044:	4605      	mov	r5, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d13a      	bne.n	80040c0 <__ieee754_logf+0xf0>
 800404a:	2100      	movs	r1, #0
 800404c:	f7fc ff40 	bl	8000ed0 <__aeabi_fcmpeq>
 8004050:	b198      	cbz	r0, 800407a <__ieee754_logf+0xaa>
 8004052:	2e00      	cmp	r6, #0
 8004054:	f000 80c4 	beq.w	80041e0 <__ieee754_logf+0x210>
 8004058:	4630      	mov	r0, r6
 800405a:	f7fc fd51 	bl	8000b00 <__aeabi_i2f>
 800405e:	4963      	ldr	r1, [pc, #396]	; (80041ec <__ieee754_logf+0x21c>)
 8004060:	4605      	mov	r5, r0
 8004062:	f7fc fda1 	bl	8000ba8 <__aeabi_fmul>
 8004066:	4962      	ldr	r1, [pc, #392]	; (80041f0 <__ieee754_logf+0x220>)
 8004068:	4604      	mov	r4, r0
 800406a:	4628      	mov	r0, r5
 800406c:	f7fc fd9c 	bl	8000ba8 <__aeabi_fmul>
 8004070:	4601      	mov	r1, r0
 8004072:	4620      	mov	r0, r4
 8004074:	e7c3      	b.n	8003ffe <__ieee754_logf+0x2e>
 8004076:	2200      	movs	r2, #0
 8004078:	e7ce      	b.n	8004018 <__ieee754_logf+0x48>
 800407a:	495e      	ldr	r1, [pc, #376]	; (80041f4 <__ieee754_logf+0x224>)
 800407c:	4628      	mov	r0, r5
 800407e:	f7fc fd93 	bl	8000ba8 <__aeabi_fmul>
 8004082:	4601      	mov	r1, r0
 8004084:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8004088:	f7fc fc84 	bl	8000994 <__aeabi_fsub>
 800408c:	4629      	mov	r1, r5
 800408e:	4604      	mov	r4, r0
 8004090:	4628      	mov	r0, r5
 8004092:	f7fc fd89 	bl	8000ba8 <__aeabi_fmul>
 8004096:	4601      	mov	r1, r0
 8004098:	4620      	mov	r0, r4
 800409a:	f7fc fd85 	bl	8000ba8 <__aeabi_fmul>
 800409e:	4604      	mov	r4, r0
 80040a0:	b90e      	cbnz	r6, 80040a6 <__ieee754_logf+0xd6>
 80040a2:	4621      	mov	r1, r4
 80040a4:	e06f      	b.n	8004186 <__ieee754_logf+0x1b6>
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7fc fd2a 	bl	8000b00 <__aeabi_i2f>
 80040ac:	494f      	ldr	r1, [pc, #316]	; (80041ec <__ieee754_logf+0x21c>)
 80040ae:	4607      	mov	r7, r0
 80040b0:	f7fc fd7a 	bl	8000ba8 <__aeabi_fmul>
 80040b4:	4606      	mov	r6, r0
 80040b6:	4638      	mov	r0, r7
 80040b8:	494d      	ldr	r1, [pc, #308]	; (80041f0 <__ieee754_logf+0x220>)
 80040ba:	f7fc fd75 	bl	8000ba8 <__aeabi_fmul>
 80040be:	e072      	b.n	80041a6 <__ieee754_logf+0x1d6>
 80040c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040c4:	f7fc fc68 	bl	8000998 <__addsf3>
 80040c8:	4601      	mov	r1, r0
 80040ca:	4628      	mov	r0, r5
 80040cc:	f7fc fe20 	bl	8000d10 <__aeabi_fdiv>
 80040d0:	4681      	mov	r9, r0
 80040d2:	4630      	mov	r0, r6
 80040d4:	f7fc fd14 	bl	8000b00 <__aeabi_i2f>
 80040d8:	4649      	mov	r1, r9
 80040da:	4680      	mov	r8, r0
 80040dc:	4648      	mov	r0, r9
 80040de:	f7fc fd63 	bl	8000ba8 <__aeabi_fmul>
 80040e2:	4601      	mov	r1, r0
 80040e4:	4683      	mov	fp, r0
 80040e6:	f7fc fd5f 	bl	8000ba8 <__aeabi_fmul>
 80040ea:	4607      	mov	r7, r0
 80040ec:	4942      	ldr	r1, [pc, #264]	; (80041f8 <__ieee754_logf+0x228>)
 80040ee:	f7fc fd5b 	bl	8000ba8 <__aeabi_fmul>
 80040f2:	4942      	ldr	r1, [pc, #264]	; (80041fc <__ieee754_logf+0x22c>)
 80040f4:	f7fc fc50 	bl	8000998 <__addsf3>
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fd55 	bl	8000ba8 <__aeabi_fmul>
 80040fe:	4940      	ldr	r1, [pc, #256]	; (8004200 <__ieee754_logf+0x230>)
 8004100:	f7fc fc4a 	bl	8000998 <__addsf3>
 8004104:	4639      	mov	r1, r7
 8004106:	f7fc fd4f 	bl	8000ba8 <__aeabi_fmul>
 800410a:	493e      	ldr	r1, [pc, #248]	; (8004204 <__ieee754_logf+0x234>)
 800410c:	f7fc fc44 	bl	8000998 <__addsf3>
 8004110:	4659      	mov	r1, fp
 8004112:	f7fc fd49 	bl	8000ba8 <__aeabi_fmul>
 8004116:	493c      	ldr	r1, [pc, #240]	; (8004208 <__ieee754_logf+0x238>)
 8004118:	4683      	mov	fp, r0
 800411a:	4638      	mov	r0, r7
 800411c:	f7fc fd44 	bl	8000ba8 <__aeabi_fmul>
 8004120:	493a      	ldr	r1, [pc, #232]	; (800420c <__ieee754_logf+0x23c>)
 8004122:	f7fc fc39 	bl	8000998 <__addsf3>
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc fd3e 	bl	8000ba8 <__aeabi_fmul>
 800412c:	4938      	ldr	r1, [pc, #224]	; (8004210 <__ieee754_logf+0x240>)
 800412e:	f7fc fc33 	bl	8000998 <__addsf3>
 8004132:	4639      	mov	r1, r7
 8004134:	f7fc fd38 	bl	8000ba8 <__aeabi_fmul>
 8004138:	4601      	mov	r1, r0
 800413a:	4658      	mov	r0, fp
 800413c:	f7fc fc2c 	bl	8000998 <__addsf3>
 8004140:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8004214 <__ieee754_logf+0x244>
 8004144:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8004148:	44a2      	add	sl, r4
 800414a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800414e:	ea43 030a 	orr.w	r3, r3, sl
 8004152:	2b00      	cmp	r3, #0
 8004154:	4607      	mov	r7, r0
 8004156:	dd30      	ble.n	80041ba <__ieee754_logf+0x1ea>
 8004158:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800415c:	4628      	mov	r0, r5
 800415e:	f7fc fd23 	bl	8000ba8 <__aeabi_fmul>
 8004162:	4629      	mov	r1, r5
 8004164:	f7fc fd20 	bl	8000ba8 <__aeabi_fmul>
 8004168:	4601      	mov	r1, r0
 800416a:	4604      	mov	r4, r0
 800416c:	4638      	mov	r0, r7
 800416e:	f7fc fc13 	bl	8000998 <__addsf3>
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fd18 	bl	8000ba8 <__aeabi_fmul>
 8004178:	4607      	mov	r7, r0
 800417a:	b946      	cbnz	r6, 800418e <__ieee754_logf+0x1be>
 800417c:	4601      	mov	r1, r0
 800417e:	4620      	mov	r0, r4
 8004180:	f7fc fc08 	bl	8000994 <__aeabi_fsub>
 8004184:	4601      	mov	r1, r0
 8004186:	4628      	mov	r0, r5
 8004188:	f7fc fc04 	bl	8000994 <__aeabi_fsub>
 800418c:	e72c      	b.n	8003fe8 <__ieee754_logf+0x18>
 800418e:	4917      	ldr	r1, [pc, #92]	; (80041ec <__ieee754_logf+0x21c>)
 8004190:	4640      	mov	r0, r8
 8004192:	f7fc fd09 	bl	8000ba8 <__aeabi_fmul>
 8004196:	4916      	ldr	r1, [pc, #88]	; (80041f0 <__ieee754_logf+0x220>)
 8004198:	4606      	mov	r6, r0
 800419a:	4640      	mov	r0, r8
 800419c:	f7fc fd04 	bl	8000ba8 <__aeabi_fmul>
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fc fbf9 	bl	8000998 <__addsf3>
 80041a6:	4601      	mov	r1, r0
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7fc fbf3 	bl	8000994 <__aeabi_fsub>
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7fc fbf0 	bl	8000994 <__aeabi_fsub>
 80041b4:	4601      	mov	r1, r0
 80041b6:	4630      	mov	r0, r6
 80041b8:	e7e6      	b.n	8004188 <__ieee754_logf+0x1b8>
 80041ba:	4601      	mov	r1, r0
 80041bc:	4628      	mov	r0, r5
 80041be:	f7fc fbe9 	bl	8000994 <__aeabi_fsub>
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc fcf0 	bl	8000ba8 <__aeabi_fmul>
 80041c8:	4604      	mov	r4, r0
 80041ca:	2e00      	cmp	r6, #0
 80041cc:	f43f af69 	beq.w	80040a2 <__ieee754_logf+0xd2>
 80041d0:	4906      	ldr	r1, [pc, #24]	; (80041ec <__ieee754_logf+0x21c>)
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7fc fce8 	bl	8000ba8 <__aeabi_fmul>
 80041d8:	4905      	ldr	r1, [pc, #20]	; (80041f0 <__ieee754_logf+0x220>)
 80041da:	4606      	mov	r6, r0
 80041dc:	4640      	mov	r0, r8
 80041de:	e76c      	b.n	80040ba <__ieee754_logf+0xea>
 80041e0:	2000      	movs	r0, #0
 80041e2:	e701      	b.n	8003fe8 <__ieee754_logf+0x18>
 80041e4:	004afb20 	.word	0x004afb20
 80041e8:	007ffff0 	.word	0x007ffff0
 80041ec:	3f317180 	.word	0x3f317180
 80041f0:	3717f7d1 	.word	0x3717f7d1
 80041f4:	3eaaaaab 	.word	0x3eaaaaab
 80041f8:	3e178897 	.word	0x3e178897
 80041fc:	3e3a3325 	.word	0x3e3a3325
 8004200:	3e924925 	.word	0x3e924925
 8004204:	3f2aaaab 	.word	0x3f2aaaab
 8004208:	3e1cd04f 	.word	0x3e1cd04f
 800420c:	3e638e29 	.word	0x3e638e29
 8004210:	3ecccccd 	.word	0x3ecccccd
 8004214:	ffcf5c30 	.word	0xffcf5c30

08004218 <nanf>:
 8004218:	4800      	ldr	r0, [pc, #0]	; (800421c <nanf+0x4>)
 800421a:	4770      	bx	lr
 800421c:	7fc00000 	.word	0x7fc00000

08004220 <_init>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr

0800422c <_fini>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr
