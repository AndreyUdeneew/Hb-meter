
Hb-meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003b10  08003b10  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b10  08003b10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08003b8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003b8c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ade8  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bee  00000000  00000000  0002ae85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018872  00000000  00000000  0002df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd5  00000000  00000000  000467d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d5e  00000000  00000000  000525a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe8  00000000  00000000  000e3358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ad4 	.word	0x08003ad4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003ad4 	.word	0x08003ad4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
	...

08000f80 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	leds[0]=0x2000;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <main+0x98>)
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	601a      	str	r2, [r3, #0]
	leds[1]=0x4000;
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <main+0x98>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	605a      	str	r2, [r3, #4]
	leds[2]=0x8000;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <main+0x98>)
 8000fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fca:	609a      	str	r2, [r3, #8]
	i=0;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <main+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fd17 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f83f 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 f96d 	bl	80012b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fde:	f000 f893 	bl	8001108 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fe2:	f000 f919 	bl	8001218 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 fd6e 	bl	8001ac8 <HAL_Delay>
  ADC1->CR2 |= ADC_CR2_CAL; // запуск калибровки
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <main+0xa0>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <main+0xa0>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6093      	str	r3, [r2, #8]
//  while ((ADC1->CR2 & ADC_CR2_CAL) != 0){} ; // ожидание окончания калибровки
//  HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <main+0xa4>)
 8000ffa:	f001 ff13 	bl	8002e24 <HAL_TIM_Base_Start_IT>
	 ADC1->CR2 &= ~ADC_CR2_ADON; // запретить АЦП
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <main+0xa0>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <main+0xa0>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6093      	str	r3, [r2, #8]
	 ADC1->CR2 |= ADC_CR2_EXTSEL; // источник запуска - SWSTART
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <main+0xa0>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <main+0xa0>)
 8001010:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001014:	6093      	str	r3, [r2, #8]
	 ADC1->CR2 |= ADC_CR2_EXTTRIG; // разрешение внешнего запуска для регулярных каналов
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <main+0xa0>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <main+0xa0>)
 800101c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001020:	6093      	str	r3, [r2, #8]
//	 ADC1->SQR1 =0; // 1 регулярный канал
//	 ADC1->SQR3 =0; // 1 преобразование - канал 0
	 ADC1->CR2 &= ~ADC_CR2_CONT; // запрет непрерывного режима
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <main+0xa0>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <main+0xa0>)
 8001028:	f023 0302 	bic.w	r3, r3, #2
 800102c:	6093      	str	r3, [r2, #8]
	 ADC1->CR1 &= ~ADC_CR1_SCAN; // запрет режима сканирования
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <main+0xa0>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <main+0xa0>)
 8001034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001038:	6053      	str	r3, [r2, #4]
	 ADC1->CR2 |= ADC_CR2_ADON;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <main+0xa0>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <main+0xa0>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6093      	str	r3, [r2, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x96>
 8001048:	20000108 	.word	0x20000108
 800104c:	20000090 	.word	0x20000090
 8001050:	40012400 	.word	0x40012400
 8001054:	20000120 	.word	0x20000120

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	2228      	movs	r2, #40	; 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fbd4 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2302      	movs	r3, #2
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001098:	2300      	movs	r3, #0
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800109c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f9ce 	bl	8002448 <HAL_RCC_OscConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010b2:	f000 fbab 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fc38 	bl	8002948 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010de:	f000 fb95 	bl	800180c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010e2:	2302      	movs	r3, #2
 80010e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80010e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fd92 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010fa:	f000 fb87 	bl	800180c <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <MX_ADC1_Init+0x108>)
 800111a:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <MX_ADC1_Init+0x10c>)
 800111c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <MX_ADC1_Init+0x108>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <MX_ADC1_Init+0x108>)
 8001128:	2200      	movs	r2, #0
 800112a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <MX_ADC1_Init+0x108>)
 800112e:	2201      	movs	r2, #1
 8001130:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <MX_ADC1_Init+0x108>)
 8001134:	2201      	movs	r2, #1
 8001136:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <MX_ADC1_Init+0x108>)
 800113a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <MX_ADC1_Init+0x108>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <MX_ADC1_Init+0x108>)
 8001148:	2206      	movs	r2, #6
 800114a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114c:	4830      	ldr	r0, [pc, #192]	; (8001210 <MX_ADC1_Init+0x108>)
 800114e:	f000 fcdf 	bl	8001b10 <HAL_ADC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8001158:	f000 fb58 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001164:	2307      	movs	r3, #7
 8001166:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4828      	ldr	r0, [pc, #160]	; (8001210 <MX_ADC1_Init+0x108>)
 800116e:	f000 fda7 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001178:	f000 fb48 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800117c:	2301      	movs	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4821      	ldr	r0, [pc, #132]	; (8001210 <MX_ADC1_Init+0x108>)
 800118a:	f000 fd99 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001194:	f000 fb3a 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001198:	2303      	movs	r3, #3
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800119c:	2303      	movs	r3, #3
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	481a      	ldr	r0, [pc, #104]	; (8001210 <MX_ADC1_Init+0x108>)
 80011a6:	f000 fd8b 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011b0:	f000 fb2c 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011b8:	2304      	movs	r3, #4
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4813      	ldr	r0, [pc, #76]	; (8001210 <MX_ADC1_Init+0x108>)
 80011c2:	f000 fd7d 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011cc:	f000 fb1e 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d0:	2306      	movs	r3, #6
 80011d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011d4:	2305      	movs	r3, #5
 80011d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_ADC1_Init+0x108>)
 80011de:	f000 fd6f 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011e8:	f000 fb10 	bl	800180c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011ec:	2307      	movs	r3, #7
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011f0:	2306      	movs	r3, #6
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x108>)
 80011fa:	f000 fd61 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001204:	f000 fb02 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000cc 	.word	0x200000cc
 8001214:	40012400 	.word	0x40012400

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <MX_TIM1_Init+0x9c>)
 8001238:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0x00;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_TIM1_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_TIM1_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_TIM1_Init+0x98>)
 8001262:	f001 fd8f 	bl	8002d84 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800126c:	f000 face 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_TIM1_Init+0x98>)
 800127e:	f001 ff2b 	bl	80030d8 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001288:	f000 fac0 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_TIM1_Init+0x98>)
 800129a:	f002 f907 	bl	80034ac <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 fab2 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000120 	.word	0x20000120
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80012cc:	2010      	movs	r0, #16
 80012ce:	f7ff fe57 	bl	8000f80 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80012d2:	2004      	movs	r0, #4
 80012d4:	f7ff fe54 	bl	8000f80 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, OUT_1_Pin|OUT_2_Pin|OUT_3_Pin);
 80012d8:	490a      	ldr	r1, [pc, #40]	; (8001304 <MX_GPIO_Init+0x4c>)
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <MX_GPIO_Init+0x50>)
 80012dc:	f7ff fe40 	bl	8000f60 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OUT_1_Pin|OUT_2_Pin|OUT_3_Pin;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_GPIO_Init+0x4c>)
 80012e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e4:	2301      	movs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0x50>)
 80012f6:	f002 fa01 	bl	80036fc <LL_GPIO_Init>

}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	04e000e0 	.word	0x04e000e0
 8001308:	40011000 	.word	0x40011000

0800130c <timerUpCallBack>:

/* USER CODE BEGIN 4 */
void timerUpCallBack(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
i+=1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <timerUpCallBack+0x4c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <timerUpCallBack+0x4c>)
 800131a:	701a      	strb	r2, [r3, #0]
if(i>2){
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <timerUpCallBack+0x4c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d902      	bls.n	800132a <timerUpCallBack+0x1e>
	i=0;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <timerUpCallBack+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
}
timerEventHandler(i);
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <timerUpCallBack+0x4c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f816 	bl	8001360 <timerEventHandler>
ledActive=i*100;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <timerUpCallBack+0x4c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	0091      	lsls	r1, r2, #2
 8001344:	461a      	mov	r2, r3
 8001346:	460b      	mov	r3, r1
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <timerUpCallBack+0x50>)
 8001350:	801a      	strh	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000090 	.word	0x20000090
 800135c:	200000b0 	.word	0x200000b0

08001360 <timerEventHandler>:
void timerEventHandler(uint8_t i){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR=leds[i];
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <timerEventHandler+0x118>)
 800136e:	4943      	ldr	r1, [pc, #268]	; (800147c <timerEventHandler+0x11c>)
 8001370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001374:	60d3      	str	r3, [r2, #12]
	if(i==0){				//	660 nm LED
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 80b8 	bne.w	80014ee <timerEventHandler+0x18e>
		 ADC1->CR2 |= ADC_CR2_EXTSEL; // источник запуска - SWSTART
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <timerEventHandler+0x120>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4a3f      	ldr	r2, [pc, #252]	; (8001480 <timerEventHandler+0x120>)
 8001384:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001388:	6093      	str	r3, [r2, #8]
		 ADC1->CR2 |= ADC_CR2_EXTTRIG; // разрешение внешнего запуска для регулярных каналов
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <timerEventHandler+0x120>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4a3c      	ldr	r2, [pc, #240]	; (8001480 <timerEventHandler+0x120>)
 8001390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001394:	6093      	str	r3, [r2, #8]
	 ADC1->SQR1 =0; // 1 регулярный канал
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <timerEventHandler+0x120>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
	 ADC1->SQR3 =0; // 1 преобразование - канал 0
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <timerEventHandler+0x120>)
 800139e:	2200      	movs	r2, #0
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
	 ADC1->CR2 &= ~ADC_CR2_CONT; // запрет непрерывного режима
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <timerEventHandler+0x120>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4a36      	ldr	r2, [pc, #216]	; (8001480 <timerEventHandler+0x120>)
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	6093      	str	r3, [r2, #8]
	 ADC1->CR1 &= ~ADC_CR1_SCAN; // запрет режима сканирования
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <timerEventHandler+0x120>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a33      	ldr	r2, [pc, #204]	; (8001480 <timerEventHandler+0x120>)
 80013b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b8:	6053      	str	r3, [r2, #4]
	 ADC1->CR2 |= ADC_CR2_ADON;
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <timerEventHandler+0x120>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <timerEventHandler+0x120>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6093      	str	r3, [r2, #8]
	 ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <timerEventHandler+0x120>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4a2d      	ldr	r2, [pc, #180]	; (8001480 <timerEventHandler+0x120>)
 80013cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d0:	6093      	str	r3, [r2, #8]
	   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 80013d2:	bf00      	nop
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <timerEventHandler+0x120>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f9      	beq.n	80013d4 <timerEventHandler+0x74>
	   dat_660_discr_1=(ADC1->DR);
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <timerEventHandler+0x120>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <timerEventHandler+0x124>)
 80013e8:	801a      	strh	r2, [r3, #0]
	   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <timerEventHandler+0x120>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <timerEventHandler+0x120>)
 80013f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f4:	6093      	str	r3, [r2, #8]

   ADC1->SQR1 =0; // 1 регулярный канал
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <timerEventHandler+0x120>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
   ADC1->SQR3 =1; // 1 преобразование - канал 1
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <timerEventHandler+0x120>)
 80013fe:	2201      	movs	r2, #1
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
   ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <timerEventHandler+0x120>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <timerEventHandler+0x120>)
 8001408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800140c:	6093      	str	r3, [r2, #8]
   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 800140e:	bf00      	nop
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <timerEventHandler+0x120>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f9      	beq.n	8001410 <timerEventHandler+0xb0>
   	   dat_660_discr_2=ADC1->DR;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <timerEventHandler+0x120>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <timerEventHandler+0x128>)
 8001424:	801a      	strh	r2, [r3, #0]
	   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <timerEventHandler+0x120>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <timerEventHandler+0x120>)
 800142c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001430:	6093      	str	r3, [r2, #8]

     if(dat_660_discr_1>=dat_660_discr_2){
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <timerEventHandler+0x124>)
 8001434:	881a      	ldrh	r2, [r3, #0]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <timerEventHandler+0x128>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d328      	bcc.n	8001490 <timerEventHandler+0x130>
      OD_660nm=(float)dat_660_discr_2/dat_660_discr_1;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <timerEventHandler+0x128>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fb58 	bl	8000af8 <__aeabi_ui2f>
 8001448:	4604      	mov	r4, r0
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <timerEventHandler+0x124>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fb56 	bl	8000b00 <__aeabi_i2f>
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fc59 	bl	8000d10 <__aeabi_fdiv>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <timerEventHandler+0x12c>)
 8001464:	601a      	str	r2, [r3, #0]
      OD_660nm=logf(OD_660nm);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <timerEventHandler+0x12c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f9da 	bl	8003824 <logf>
 8001470:	4603      	mov	r3, r0
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <timerEventHandler+0x12c>)
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e027      	b.n	80014c8 <timerEventHandler+0x168>
 8001478:	40011000 	.word	0x40011000
 800147c:	20000108 	.word	0x20000108
 8001480:	40012400 	.word	0x40012400
 8001484:	20000168 	.word	0x20000168
 8001488:	200000c4 	.word	0x200000c4
 800148c:	20000170 	.word	0x20000170
     }
     else{
    	 OD_660nm=(float)dat_660_discr_1/dat_660_discr_2;
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <timerEventHandler+0x298>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fb2f 	bl	8000af8 <__aeabi_ui2f>
 800149a:	4604      	mov	r4, r0
 800149c:	4b57      	ldr	r3, [pc, #348]	; (80015fc <timerEventHandler+0x29c>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fb2d 	bl	8000b00 <__aeabi_i2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff fc30 	bl	8000d10 <__aeabi_fdiv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b52      	ldr	r3, [pc, #328]	; (8001600 <timerEventHandler+0x2a0>)
 80014b6:	601a      	str	r2, [r3, #0]
    	 OD_660nm=logf(OD_660nm);
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <timerEventHandler+0x2a0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f9b1 	bl	8003824 <logf>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a4e      	ldr	r2, [pc, #312]	; (8001600 <timerEventHandler+0x2a0>)
 80014c6:	6013      	str	r3, [r2, #0]
     }
     Ua_660nm=OD_660nm/(-0.508);
 80014c8:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <timerEventHandler+0x2a0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffa3 	bl	8000418 <__aeabi_f2d>
 80014d2:	a347      	add	r3, pc, #284	; (adr r3, 80015f0 <timerEventHandler+0x290>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f920 	bl	800071c <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fa02 	bl	80008ec <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a46      	ldr	r2, [pc, #280]	; (8001604 <timerEventHandler+0x2a4>)
 80014ec:	6013      	str	r3, [r2, #0]
}
	if(i==1){			//	880 nm LED
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 80c0 	bne.w	8001676 <timerEventHandler+0x316>
		 ADC1->CR2 |= ADC_CR2_EXTSEL; // источник запуска - SWSTART
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <timerEventHandler+0x2a8>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4a43      	ldr	r2, [pc, #268]	; (8001608 <timerEventHandler+0x2a8>)
 80014fc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001500:	6093      	str	r3, [r2, #8]
		 ADC1->CR2 |= ADC_CR2_EXTTRIG; // разрешение внешнего запуска для регулярных каналов
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <timerEventHandler+0x2a8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4a40      	ldr	r2, [pc, #256]	; (8001608 <timerEventHandler+0x2a8>)
 8001508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150c:	6093      	str	r3, [r2, #8]
		 ADC1->SQR1 =0; // 1 регулярный канал
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <timerEventHandler+0x2a8>)
 8001510:	2200      	movs	r2, #0
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
		 ADC1->SQR3 =0x03; // 1 преобразование - канал 0
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <timerEventHandler+0x2a8>)
 8001516:	2203      	movs	r2, #3
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
		 ADC1->CR2 &= ~ADC_CR2_CONT; // запрет непрерывного режима
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <timerEventHandler+0x2a8>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <timerEventHandler+0x2a8>)
 8001520:	f023 0302 	bic.w	r3, r3, #2
 8001524:	6093      	str	r3, [r2, #8]
		 ADC1->CR1 &= ~ADC_CR1_SCAN; // запрет режима сканирования
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <timerEventHandler+0x2a8>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <timerEventHandler+0x2a8>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001530:	6053      	str	r3, [r2, #4]
		 ADC1->CR2 |= ADC_CR2_ADON; // разрешить АЦП
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <timerEventHandler+0x2a8>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	4a34      	ldr	r2, [pc, #208]	; (8001608 <timerEventHandler+0x2a8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6093      	str	r3, [r2, #8]
		 ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <timerEventHandler+0x2a8>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <timerEventHandler+0x2a8>)
 8001544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001548:	6093      	str	r3, [r2, #8]
		   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 800154a:	bf00      	nop
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <timerEventHandler+0x2a8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f9      	beq.n	800154c <timerEventHandler+0x1ec>
		   dat_880_discr_1=(ADC1->DR);
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <timerEventHandler+0x2a8>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <timerEventHandler+0x2ac>)
 8001560:	801a      	strh	r2, [r3, #0]
		   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <timerEventHandler+0x2a8>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4a28      	ldr	r2, [pc, #160]	; (8001608 <timerEventHandler+0x2a8>)
 8001568:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800156c:	6093      	str	r3, [r2, #8]
	   ADC1->SQR1 =0; // 1 регулярный канал
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <timerEventHandler+0x2a8>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
 	   ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <timerEventHandler+0x2a8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a23      	ldr	r2, [pc, #140]	; (8001608 <timerEventHandler+0x2a8>)
 800157a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157e:	6093      	str	r3, [r2, #8]
	   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 8001580:	bf00      	nop
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <timerEventHandler+0x2a8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f9      	beq.n	8001582 <timerEventHandler+0x222>
	   	   dat_880_discr_2=ADC1->DR;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <timerEventHandler+0x2a8>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <timerEventHandler+0x2b0>)
 8001596:	801a      	strh	r2, [r3, #0]
		   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <timerEventHandler+0x2a8>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <timerEventHandler+0x2a8>)
 800159e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015a2:	6093      	str	r3, [r2, #8]
//
		     if(dat_880_discr_1>=dat_880_discr_2){
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <timerEventHandler+0x2ac>)
 80015a6:	881a      	ldrh	r2, [r3, #0]
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <timerEventHandler+0x2b0>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d333      	bcc.n	8001618 <timerEventHandler+0x2b8>
		      OD_880nm=(float)dat_880_discr_2/dat_880_discr_1;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <timerEventHandler+0x2b0>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fa9f 	bl	8000af8 <__aeabi_ui2f>
 80015ba:	4604      	mov	r4, r0
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <timerEventHandler+0x2ac>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa9d 	bl	8000b00 <__aeabi_i2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff fba0 	bl	8000d10 <__aeabi_fdiv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <timerEventHandler+0x2b4>)
 80015d6:	601a      	str	r2, [r3, #0]
		      OD_880nm=logf(OD_880nm);
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <timerEventHandler+0x2b4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f921 	bl	8003824 <logf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <timerEventHandler+0x2b4>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e032      	b.n	8001650 <timerEventHandler+0x2f0>
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	374bc6a8 	.word	0x374bc6a8
 80015f4:	bfe04189 	.word	0xbfe04189
 80015f8:	20000168 	.word	0x20000168
 80015fc:	200000c4 	.word	0x200000c4
 8001600:	20000170 	.word	0x20000170
 8001604:	200000b4 	.word	0x200000b4
 8001608:	40012400 	.word	0x40012400
 800160c:	20000174 	.word	0x20000174
 8001610:	20000176 	.word	0x20000176
 8001614:	20000104 	.word	0x20000104
		     }
		     else{
		    	 OD_880nm=(float)dat_880_discr_1/dat_880_discr_2;
 8001618:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <timerEventHandler+0x488>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa6b 	bl	8000af8 <__aeabi_ui2f>
 8001622:	4604      	mov	r4, r0
 8001624:	4b71      	ldr	r3, [pc, #452]	; (80017ec <timerEventHandler+0x48c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fa69 	bl	8000b00 <__aeabi_i2f>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fb6c 	bl	8000d10 <__aeabi_fdiv>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <timerEventHandler+0x490>)
 800163e:	601a      	str	r2, [r3, #0]
		    	 OD_880nm=logf(OD_880nm);
 8001640:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <timerEventHandler+0x490>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f002 f8ed 	bl	8003824 <logf>
 800164a:	4603      	mov	r3, r0
 800164c:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <timerEventHandler+0x490>)
 800164e:	6013      	str	r3, [r2, #0]
		     }
		     Ua_880nm=OD_880nm/(-0.508);
 8001650:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <timerEventHandler+0x490>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fedf 	bl	8000418 <__aeabi_f2d>
 800165a:	a361      	add	r3, pc, #388	; (adr r3, 80017e0 <timerEventHandler+0x480>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f85c 	bl	800071c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f93e 	bl	80008ec <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <timerEventHandler+0x494>)
 8001674:	6013      	str	r3, [r2, #0]
}
	if(i==2){			//	940 nm LED
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b02      	cmp	r3, #2
 800167a:	f040 80ac 	bne.w	80017d6 <timerEventHandler+0x476>
		 ADC1->CR2 |= ADC_CR2_EXTSEL; // источник запуска - SWSTART
 800167e:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <timerEventHandler+0x498>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <timerEventHandler+0x498>)
 8001684:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001688:	6093      	str	r3, [r2, #8]
		 ADC1->CR2 |= ADC_CR2_EXTTRIG; // разрешение внешнего запуска для регулярных каналов
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <timerEventHandler+0x498>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <timerEventHandler+0x498>)
 8001690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001694:	6093      	str	r3, [r2, #8]
		 ADC1->SQR1 =0; // 1 регулярный канал
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <timerEventHandler+0x498>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
		 ADC1->SQR3 =0x06; // 1 преобразование - канал 0
 800169c:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <timerEventHandler+0x498>)
 800169e:	2206      	movs	r2, #6
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
		 ADC1->CR2 &= ~ADC_CR2_CONT; // запрет непрерывного режима
 80016a2:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <timerEventHandler+0x498>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <timerEventHandler+0x498>)
 80016a8:	f023 0302 	bic.w	r3, r3, #2
 80016ac:	6093      	str	r3, [r2, #8]
		 ADC1->CR1 &= ~ADC_CR1_SCAN; // запрет режима сканирования
 80016ae:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <timerEventHandler+0x498>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <timerEventHandler+0x498>)
 80016b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b8:	6053      	str	r3, [r2, #4]
		 ADC1->CR2 |= ADC_CR2_ADON; // разрешить АЦП
 80016ba:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <timerEventHandler+0x498>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <timerEventHandler+0x498>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6093      	str	r3, [r2, #8]
		 ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <timerEventHandler+0x498>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	; (80017f8 <timerEventHandler+0x498>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d0:	6093      	str	r3, [r2, #8]
		   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 80016d2:	bf00      	nop
 80016d4:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <timerEventHandler+0x498>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f9      	beq.n	80016d4 <timerEventHandler+0x374>
		   dat_940_discr_1=(ADC1->DR);
 80016e0:	4b45      	ldr	r3, [pc, #276]	; (80017f8 <timerEventHandler+0x498>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <timerEventHandler+0x49c>)
 80016e8:	801a      	strh	r2, [r3, #0]
		   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <timerEventHandler+0x498>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a42      	ldr	r2, [pc, #264]	; (80017f8 <timerEventHandler+0x498>)
 80016f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016f4:	6093      	str	r3, [r2, #8]
	   ADC1->SQR1 =0; // 1 регулярный канал
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <timerEventHandler+0x498>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
	   ADC1->SQR3 =0x07; // 1 преобразование - канал 1
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <timerEventHandler+0x498>)
 80016fe:	2207      	movs	r2, #7
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
	   ADC1->CR2 |= ADC_CR2_SWSTART; // запуск АЦП
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <timerEventHandler+0x498>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <timerEventHandler+0x498>)
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800170c:	6093      	str	r3, [r2, #8]
	   while(!(ADC1->SR & ADC_SR_EOC)); // ожидание завершения преобразования
 800170e:	bf00      	nop
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <timerEventHandler+0x498>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f9      	beq.n	8001710 <timerEventHandler+0x3b0>
	   	   dat_940_discr_2=ADC1->DR;
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <timerEventHandler+0x498>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b37      	ldr	r3, [pc, #220]	; (8001800 <timerEventHandler+0x4a0>)
 8001724:	801a      	strh	r2, [r3, #0]
		   ADC1->CR2 &= ~ADC_CR2_SWSTART; // выключение АЦП
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <timerEventHandler+0x498>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <timerEventHandler+0x498>)
 800172c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001730:	6093      	str	r3, [r2, #8]
//
		     if(dat_940_discr_1>=dat_940_discr_2){
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <timerEventHandler+0x49c>)
 8001734:	881a      	ldrh	r2, [r3, #0]
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <timerEventHandler+0x4a0>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d31c      	bcc.n	8001778 <timerEventHandler+0x418>
		      OD_940nm=(float)dat_940_discr_2/dat_940_discr_1;
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <timerEventHandler+0x4a0>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9d8 	bl	8000af8 <__aeabi_ui2f>
 8001748:	4604      	mov	r4, r0
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <timerEventHandler+0x49c>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f9d6 	bl	8000b00 <__aeabi_i2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fad9 	bl	8000d10 <__aeabi_fdiv>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <timerEventHandler+0x4a4>)
 8001764:	601a      	str	r2, [r3, #0]
		      OD_940nm=logf(OD_940nm);
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <timerEventHandler+0x4a4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 f85a 	bl	8003824 <logf>
 8001770:	4603      	mov	r3, r0
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <timerEventHandler+0x4a4>)
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01b      	b.n	80017b0 <timerEventHandler+0x450>
		     }
		     else{
		    	 OD_940nm=(float)dat_940_discr_1/dat_940_discr_2;
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <timerEventHandler+0x49c>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f9bb 	bl	8000af8 <__aeabi_ui2f>
 8001782:	4604      	mov	r4, r0
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <timerEventHandler+0x4a0>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff f9b9 	bl	8000b00 <__aeabi_i2f>
 800178e:	4603      	mov	r3, r0
 8001790:	4619      	mov	r1, r3
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fabc 	bl	8000d10 <__aeabi_fdiv>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <timerEventHandler+0x4a4>)
 800179e:	601a      	str	r2, [r3, #0]
		    	 OD_940nm=logf(OD_940nm);
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <timerEventHandler+0x4a4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 f83d 	bl	8003824 <logf>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a15      	ldr	r2, [pc, #84]	; (8001804 <timerEventHandler+0x4a4>)
 80017ae:	6013      	str	r3, [r2, #0]
		     }
		     Ua_940nm=OD_940nm/(-0.508);
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <timerEventHandler+0x4a4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe2f 	bl	8000418 <__aeabi_f2d>
 80017ba:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <timerEventHandler+0x480>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ffac 	bl	800071c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f88e 	bl	80008ec <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <timerEventHandler+0x4a8>)
 80017d4:	6013      	str	r3, [r2, #0]
//	 CHbO2=(E_HbO2_660_*Ua_660nm+E_HbO2_880_*Ua_880nm+E_HbO2_940_*Ua_940nm)*67000;
//	 CH2O=(E_H2O_660_*Ua_660nm+E_H2O_880_*Ua_880nm+E_H2O_940_*Ua_940nm)*18;
}
	// here we will cound Hb concentrations

}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	374bc6a8 	.word	0x374bc6a8
 80017e4:	bfe04189 	.word	0xbfe04189
 80017e8:	20000174 	.word	0x20000174
 80017ec:	20000176 	.word	0x20000176
 80017f0:	20000104 	.word	0x20000104
 80017f4:	20000114 	.word	0x20000114
 80017f8:	40012400 	.word	0x40012400
 80017fc:	20000178 	.word	0x20000178
 8001800:	20000118 	.word	0x20000118
 8001804:	200000c0 	.word	0x200000c0
 8001808:	2000011c 	.word	0x2000011c

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
//	  HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
	    HAL_Delay(250);
 8001814:	20fa      	movs	r0, #250	; 0xfa
 8001816:	f000 f957 	bl	8001ac8 <HAL_Delay>
 800181a:	e7fb      	b.n	8001814 <Error_Handler+0x8>

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_MspInit+0x5c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_MspInit+0x5c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_MspInit+0x5c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_MspInit+0x5c>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_MspInit+0x5c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_MspInit+0x5c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_MspInit+0x60>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_MspInit+0x60>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <HAL_ADC_MspInit+0x6c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d121      	bne.n	80018e4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_ADC_MspInit+0x70>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80018d0:	23db      	movs	r3, #219	; 0xdb
 80018d2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_ADC_MspInit+0x74>)
 80018e0:	f000 fc2e 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012400 	.word	0x40012400
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_TIM_Base_MspInit+0x44>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_Base_MspInit+0x48>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_TIM_Base_MspInit+0x48>)
 8001910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0x48>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2019      	movs	r0, #25
 8001928:	f000 fbd3 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800192c:	2019      	movs	r0, #25
 800192e:	f000 fbec 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198a:	f000 f881 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	timerUpCallBack();
 8001998:	f7ff fcb8 	bl	800130c <timerUpCallBack>

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM1_UP_IRQHandler+0x14>)
 800199e:	f001 fa93 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000120 	.word	0x20000120

080019ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019de:	f7ff ffe5 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f001 fef3 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff fae3 	bl	8000fb0 <main>
  bx lr
 80019ea:	4770      	bx	lr
  ldr r3, =_sidata
 80019ec:	08003b18 	.word	0x08003b18
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019f4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80019f8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80019fc:	20000180 	.word	0x20000180

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x28>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 fb51 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fefc 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fb69 	bl	8002126 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 fb31 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000017c 	.word	0x2000017c

08001ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	2000017c 	.word	0x2000017c

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffe0 	bl	8001ab4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0be      	b.n	8001cb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fe96 	bl	8001880 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f9ab 	bl	8001eb0 <ADC_ConversionStop_Disable>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8099 	bne.w	8001c9e <HAL_ADC_Init+0x18e>
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8095 	bne.w	8001c9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7c:	f023 0302 	bic.w	r3, r3, #2
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_Init+0xa2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_ADC_Init+0xa8>
 8001bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_Init+0xaa>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7d1b      	ldrb	r3, [r3, #20]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d119      	bne.n	8001bfc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7b1b      	ldrb	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	035a      	lsls	r2, r3, #13
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e00b      	b.n	8001bfc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_ADC_Init+0x1a8>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_Init+0x126>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d104      	bne.n	8001c40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	051b      	lsls	r3, r3, #20
 8001c3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_ADC_Init+0x1ac>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10b      	bne.n	8001c7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c7a:	e018      	b.n	8001cae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	f023 0312 	bic.w	r3, r3, #18
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cbc:	ff1f0efe 	.word	0xff1f0efe

08001cc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x20>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0dc      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1da>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b06      	cmp	r3, #6
 8001cee:	d81c      	bhi.n	8001d2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b05      	subs	r3, #5
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b05      	subs	r3, #5
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34
 8001d28:	e03c      	b.n	8001da4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d81c      	bhi.n	8001d6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b23      	subs	r3, #35	; 0x23
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4019      	ands	r1, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b23      	subs	r3, #35	; 0x23
 8001d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6a:	e01b      	b.n	8001da4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b41      	subs	r3, #65	; 0x41
 8001d7e:	221f      	movs	r2, #31
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4019      	ands	r1, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b41      	subs	r3, #65	; 0x41
 8001d98:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d91c      	bls.n	8001de6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68d9      	ldr	r1, [r3, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4019      	ands	r1, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6898      	ldr	r0, [r3, #8]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b1e      	subs	r3, #30
 8001dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	e019      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6919      	ldr	r1, [r3, #16]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	2207      	movs	r2, #7
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4019      	ands	r1, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6898      	ldr	r0, [r3, #8]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e26:	2b11      	cmp	r3, #17
 8001e28:	d132      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d125      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d126      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e50:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d11a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_ADC_ConfigChannel+0x1ec>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	0c9a      	lsrs	r2, r3, #18
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x1b2>
 8001e7e:	e007      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40012400 	.word	0x40012400
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d127      	bne.n	8001f1a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eda:	f7ff fdeb 	bl	8001ab4 <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ee0:	e014      	b.n	8001f0c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ee2:	f7ff fde7 	bl	8001ab4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d90d      	bls.n	8001f0c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e007      	b.n	8001f1c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d0e3      	beq.n	8001ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <__NVIC_EnableIRQ+0x34>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff90 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff2d 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff42 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff90 	bl	8002014 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5f 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff35 	bl	8001f88 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002152:	e169      	b.n	8002428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002154:	2201      	movs	r2, #1
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 8158 	bne.w	8002422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a9a      	ldr	r2, [pc, #616]	; (80023e0 <HAL_GPIO_Init+0x2a0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d05e      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 800217c:	4a98      	ldr	r2, [pc, #608]	; (80023e0 <HAL_GPIO_Init+0x2a0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d875      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 8002182:	4a98      	ldr	r2, [pc, #608]	; (80023e4 <HAL_GPIO_Init+0x2a4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d058      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 8002188:	4a96      	ldr	r2, [pc, #600]	; (80023e4 <HAL_GPIO_Init+0x2a4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d86f      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 800218e:	4a96      	ldr	r2, [pc, #600]	; (80023e8 <HAL_GPIO_Init+0x2a8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d052      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 8002194:	4a94      	ldr	r2, [pc, #592]	; (80023e8 <HAL_GPIO_Init+0x2a8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d869      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 800219a:	4a94      	ldr	r2, [pc, #592]	; (80023ec <HAL_GPIO_Init+0x2ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d04c      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 80021a0:	4a92      	ldr	r2, [pc, #584]	; (80023ec <HAL_GPIO_Init+0x2ac>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d863      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021a6:	4a92      	ldr	r2, [pc, #584]	; (80023f0 <HAL_GPIO_Init+0x2b0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d046      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 80021ac:	4a90      	ldr	r2, [pc, #576]	; (80023f0 <HAL_GPIO_Init+0x2b0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d85d      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d82a      	bhi.n	800220c <HAL_GPIO_Init+0xcc>
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d859      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_GPIO_Init+0x80>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	0800223b 	.word	0x0800223b
 80021c4:	08002215 	.word	0x08002215
 80021c8:	08002227 	.word	0x08002227
 80021cc:	08002269 	.word	0x08002269
 80021d0:	0800226f 	.word	0x0800226f
 80021d4:	0800226f 	.word	0x0800226f
 80021d8:	0800226f 	.word	0x0800226f
 80021dc:	0800226f 	.word	0x0800226f
 80021e0:	0800226f 	.word	0x0800226f
 80021e4:	0800226f 	.word	0x0800226f
 80021e8:	0800226f 	.word	0x0800226f
 80021ec:	0800226f 	.word	0x0800226f
 80021f0:	0800226f 	.word	0x0800226f
 80021f4:	0800226f 	.word	0x0800226f
 80021f8:	0800226f 	.word	0x0800226f
 80021fc:	0800226f 	.word	0x0800226f
 8002200:	0800226f 	.word	0x0800226f
 8002204:	0800221d 	.word	0x0800221d
 8002208:	08002231 	.word	0x08002231
 800220c:	4a79      	ldr	r2, [pc, #484]	; (80023f4 <HAL_GPIO_Init+0x2b4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002212:	e02c      	b.n	800226e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e029      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	3304      	adds	r3, #4
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e024      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	3308      	adds	r3, #8
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e01f      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	330c      	adds	r3, #12
 8002236:	623b      	str	r3, [r7, #32]
          break;
 8002238:	e01a      	b.n	8002270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002242:	2304      	movs	r3, #4
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e013      	b.n	8002270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002250:	2308      	movs	r3, #8
 8002252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	611a      	str	r2, [r3, #16]
          break;
 800225a:	e009      	b.n	8002270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	615a      	str	r2, [r3, #20]
          break;
 8002266:	e003      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
          break;
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x130>
          break;
 800226e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d801      	bhi.n	800227a <HAL_GPIO_Init+0x13a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	e001      	b.n	800227e <HAL_GPIO_Init+0x13e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2bff      	cmp	r3, #255	; 0xff
 8002284:	d802      	bhi.n	800228c <HAL_GPIO_Init+0x14c>
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x152>
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3b08      	subs	r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	210f      	movs	r1, #15
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80b1 	beq.w	8002422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c0:	4b4d      	ldr	r3, [pc, #308]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a4c      	ldr	r2, [pc, #304]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d8:	4a48      	ldr	r2, [pc, #288]	; (80023fc <HAL_GPIO_Init+0x2bc>)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_GPIO_Init+0x2c0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <HAL_GPIO_Init+0x1ec>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3f      	ldr	r2, [pc, #252]	; (8002404 <HAL_GPIO_Init+0x2c4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00d      	beq.n	8002328 <HAL_GPIO_Init+0x1e8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3e      	ldr	r2, [pc, #248]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <HAL_GPIO_Init+0x1e4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3d      	ldr	r2, [pc, #244]	; (800240c <HAL_GPIO_Init+0x2cc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_GPIO_Init+0x1e0>
 800231c:	2303      	movs	r3, #3
 800231e:	e006      	b.n	800232e <HAL_GPIO_Init+0x1ee>
 8002320:	2304      	movs	r3, #4
 8002322:	e004      	b.n	800232e <HAL_GPIO_Init+0x1ee>
 8002324:	2302      	movs	r3, #2
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x1ee>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_GPIO_Init+0x1ee>
 800232c:	2300      	movs	r3, #0
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	f002 0203 	and.w	r2, r2, #3
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	4093      	lsls	r3, r2
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800233e:	492f      	ldr	r1, [pc, #188]	; (80023fc <HAL_GPIO_Init+0x2bc>)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	492c      	ldr	r1, [pc, #176]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	4928      	ldr	r1, [pc, #160]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002370:	4013      	ands	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	491e      	ldr	r1, [pc, #120]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 8002398:	4013      	ands	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	4918      	ldr	r1, [pc, #96]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4914      	ldr	r1, [pc, #80]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d021      	beq.n	8002414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
 80023dc:	e021      	b.n	8002422 <HAL_GPIO_Init+0x2e2>
 80023de:	bf00      	nop
 80023e0:	10320000 	.word	0x10320000
 80023e4:	10310000 	.word	0x10310000
 80023e8:	10220000 	.word	0x10220000
 80023ec:	10210000 	.word	0x10210000
 80023f0:	10120000 	.word	0x10120000
 80023f4:	10110000 	.word	0x10110000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010000 	.word	0x40010000
 8002400:	40010800 	.word	0x40010800
 8002404:	40010c00 	.word	0x40010c00
 8002408:	40011000 	.word	0x40011000
 800240c:	40011400 	.word	0x40011400
 8002410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_GPIO_Init+0x304>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	43db      	mvns	r3, r3
 800241c:	4909      	ldr	r1, [pc, #36]	; (8002444 <HAL_GPIO_Init+0x304>)
 800241e:	4013      	ands	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3301      	adds	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f47f ae8e 	bne.w	8002154 <HAL_GPIO_Init+0x14>
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	372c      	adds	r7, #44	; 0x2c
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e26c      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8087 	beq.w	8002576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b04      	cmp	r3, #4
 8002472:	d00c      	beq.n	800248e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002474:	4b8f      	ldr	r3, [pc, #572]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d112      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5e>
 8002480:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d10b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d06c      	beq.n	8002574 <HAL_RCC_OscConfig+0x12c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d168      	bne.n	8002574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e246      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x76>
 80024b0:	4b80      	ldr	r3, [pc, #512]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a7f      	ldr	r2, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e02e      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b7b      	ldr	r3, [pc, #492]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a77      	ldr	r2, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0xbc>
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a71      	ldr	r2, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fac6 	bl	8001ab4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fac2 	bl	8001ab4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1fa      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xe4>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fab2 	bl	8001ab4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff faae 	bl	8001ab4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1e6      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x10c>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x18c>
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d116      	bne.n	80025d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x176>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e1ba      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4939      	ldr	r1, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	e03a      	b.n	800264a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa67 	bl	8001ab4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fa63 	bl	8001ab4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e19b      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4927      	ldr	r1, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
 800261c:	e015      	b.n	800264a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff fa46 	bl	8001ab4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff fa42 	bl	8001ab4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e17a      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03a      	beq.n	80026cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d019      	beq.n	8002692 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_RCC_OscConfig+0x274>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7ff fa26 	bl	8001ab4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7ff fa22 	bl	8001ab4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e15a      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 faa6 	bl	8002bdc <RCC_Delay>
 8002690:	e01c      	b.n	80026cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_OscConfig+0x274>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff fa0c 	bl	8001ab4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269e:	e00f      	b.n	80026c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fa08 	bl	8001ab4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d908      	bls.n	80026c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e140      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	42420000 	.word	0x42420000
 80026bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e9      	bne.n	80026a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80a6 	beq.w	8002826 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b97      	ldr	r3, [pc, #604]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	4b94      	ldr	r3, [pc, #592]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a93      	ldr	r2, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b91      	ldr	r3, [pc, #580]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a8a      	ldr	r2, [pc, #552]	; (8002940 <HAL_RCC_OscConfig+0x4f8>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7ff f9c9 	bl	8001ab4 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7ff f9c5 	bl	8001ab4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0fd      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	4b81      	ldr	r3, [pc, #516]	; (8002940 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x312>
 800274c:	4b7b      	ldr	r3, [pc, #492]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a7a      	ldr	r2, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	e02d      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x334>
 8002762:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a75      	ldr	r2, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4b73      	ldr	r3, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a72      	ldr	r2, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	e01c      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b05      	cmp	r3, #5
 8002782:	d10c      	bne.n	800279e <HAL_RCC_OscConfig+0x356>
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a6c      	ldr	r2, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e00b      	b.n	80027b6 <HAL_RCC_OscConfig+0x36e>
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6213      	str	r3, [r2, #32]
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a63      	ldr	r2, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d015      	beq.n	80027ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7ff f979 	bl	8001ab4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7ff f975 	bl	8001ab4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0ab      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ee      	beq.n	80027c6 <HAL_RCC_OscConfig+0x37e>
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff f963 	bl	8001ab4 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7ff f95f 	bl	8001ab4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e095      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ee      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b48      	ldr	r3, [pc, #288]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a47      	ldr	r2, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002824:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8081 	beq.w	8002932 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002830:	4b42      	ldr	r3, [pc, #264]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d061      	beq.n	8002900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d146      	bne.n	80028d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <HAL_RCC_OscConfig+0x4fc>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7ff f933 	bl	8001ab4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff f92f 	bl	8001ab4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e067      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d108      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	492d      	ldr	r1, [pc, #180]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a19      	ldr	r1, [r3, #32]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	430b      	orrs	r3, r1
 800289e:	4927      	ldr	r1, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x4fc>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7ff f903 	bl	8001ab4 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7ff f8ff 	bl	8001ab4 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e037      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x46a>
 80028d0:	e02f      	b.n	8002932 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_RCC_OscConfig+0x4fc>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff f8ec 	bl	8001ab4 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f8e8 	bl	8001ab4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e020      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x498>
 80028fe:	e018      	b.n	8002932 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e013      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x4f4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	429a      	cmp	r2, r3
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	42420060 	.word	0x42420060

08002948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0d0      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d910      	bls.n	800298c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 0207 	bic.w	r2, r3, #7
 8002972:	4965      	ldr	r1, [pc, #404]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0b8      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d040      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d115      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e073      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06b      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4936      	ldr	r1, [pc, #216]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7ff f83c 	bl	8001ab4 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7ff f838 	bl	8001ab4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e053      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d210      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 0207 	bic.w	r2, r3, #7
 8002a7e:	4922      	ldr	r1, [pc, #136]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e032      	b.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad6:	f000 f821 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	490a      	ldr	r1, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1cc>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1d0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe ff9a 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08003afc 	.word	0x08003afc
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b490      	push	{r4, r7}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b24:	1d3c      	adds	r4, r7, #4
 8002b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b2c:	f240 2301 	movw	r3, #513	; 0x201
 8002b30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x40>
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x46>
 8002b5a:	e02d      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5e:	623b      	str	r3, [r7, #32]
      break;
 8002b60:	e02d      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	0c9b      	lsrs	r3, r3, #18
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b6e:	4413      	add	r3, r2
 8002b70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0c5b      	lsrs	r3, r3, #17
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b8e:	4413      	add	r3, r2
 8002b90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9a:	fb02 f203 	mul.w	r2, r2, r3
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e004      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	623b      	str	r3, [r7, #32]
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bba:	623b      	str	r3, [r7, #32]
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3728      	adds	r7, #40	; 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc90      	pop	{r4, r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	08003aec 	.word	0x08003aec
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	003d0900 	.word	0x003d0900

08002bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <RCC_Delay+0x34>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <RCC_Delay+0x38>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0a5b      	lsrs	r3, r3, #9
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf8:	bf00      	nop
  }
  while (Delay --);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	60fa      	str	r2, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <RCC_Delay+0x1c>
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000000 	.word	0x20000000
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d07d      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d118      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c78:	f7fe ff1c 	bl	8001ab4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	e008      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c80:	f7fe ff18 	bl	8001ab4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e06d      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02e      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d027      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cd2:	4a29      	ldr	r2, [pc, #164]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d014      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fee7 	bl	8001ab4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fee3 	bl	8001ab4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e036      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ee      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4917      	ldr	r1, [pc, #92]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	490b      	ldr	r1, [pc, #44]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42420440 	.word	0x42420440

08002d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e041      	b.n	8002e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fda4 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f000 fa7a 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d001      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e03a      	b.n	8002eb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_TIM_Base_Start_IT+0x98>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d009      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d010      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	e007      	b.n	8002eb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9ba 	bl	8003284 <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9ad 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9bc 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f990 	bl	8003284 <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f983 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f992 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f966 	bl	8003284 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f959 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f968 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f93c 	bl	8003284 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f92f 	bl	8003272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f93e 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f90a 	bl	8003260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa81 	bl	800357a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f902 	bl	80032a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0220 	mvn.w	r2, #32
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa4c 	bl	8003568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_TIM_ConfigClockSource+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0b3      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x180>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800310e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003128:	d03e      	beq.n	80031a8 <HAL_TIM_ConfigClockSource+0xd0>
 800312a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312e:	f200 8087 	bhi.w	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	f000 8085 	beq.w	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	d87f      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b70      	cmp	r3, #112	; 0x70
 8003142:	d01a      	beq.n	800317a <HAL_TIM_ConfigClockSource+0xa2>
 8003144:	2b70      	cmp	r3, #112	; 0x70
 8003146:	d87b      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003148:	2b60      	cmp	r3, #96	; 0x60
 800314a:	d050      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x116>
 800314c:	2b60      	cmp	r3, #96	; 0x60
 800314e:	d877      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003150:	2b50      	cmp	r3, #80	; 0x50
 8003152:	d03c      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xf6>
 8003154:	2b50      	cmp	r3, #80	; 0x50
 8003156:	d873      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d058      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x136>
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d86f      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003160:	2b30      	cmp	r3, #48	; 0x30
 8003162:	d064      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x156>
 8003164:	2b30      	cmp	r3, #48	; 0x30
 8003166:	d86b      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d060      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x156>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d867      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d05c      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x156>
 8003174:	2b10      	cmp	r3, #16
 8003176:	d05a      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003178:	e062      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f000 f970 	bl	800346e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800319c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	609a      	str	r2, [r3, #8]
      break;
 80031a6:	e04e      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6899      	ldr	r1, [r3, #8]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f000 f959 	bl	800346e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ca:	609a      	str	r2, [r3, #8]
      break;
 80031cc:	e03b      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 f8d0 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2150      	movs	r1, #80	; 0x50
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f927 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 80031ec:	e02b      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 f8ee 	bl	80033dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2160      	movs	r1, #96	; 0x60
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f917 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 800320c:	e01b      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	461a      	mov	r2, r3
 800321c:	f000 f8b0 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f907 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 800322c:	e00b      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f000 f8fe 	bl	800343a <TIM_ITRx_SetConfig>
        break;
 800323e:	e002      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003244:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a29      	ldr	r2, [pc, #164]	; (8003374 <TIM_Base_SetConfig+0xb8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a26      	ldr	r2, [pc, #152]	; (8003378 <TIM_Base_SetConfig+0xbc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x30>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a25      	ldr	r2, [pc, #148]	; (800337c <TIM_Base_SetConfig+0xc0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <TIM_Base_SetConfig+0xb8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a19      	ldr	r2, [pc, #100]	; (8003378 <TIM_Base_SetConfig+0xbc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a18      	ldr	r2, [pc, #96]	; (800337c <TIM_Base_SetConfig+0xc0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a07      	ldr	r2, [pc, #28]	; (8003374 <TIM_Base_SetConfig+0xb8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800

08003380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 030a 	bic.w	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0210 	bic.w	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003406:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	031b      	lsls	r3, r3, #12
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003418:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	f043 0307 	orr.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346e:	b480      	push	{r7}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003488:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	431a      	orrs	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e046      	b.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d009      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a10      	ldr	r2, [pc, #64]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10c      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800

08003568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <LL_GPIO_SetPinMode>:
{
 800358c:	b490      	push	{r4, r7}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0e1b      	lsrs	r3, r3, #24
 80035a0:	4413      	add	r3, r2
 80035a2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80035a4:	6822      	ldr	r2, [r4, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	210f      	movs	r1, #15
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	401a      	ands	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	61bb      	str	r3, [r7, #24]
  return result;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	6023      	str	r3, [r4, #0]
}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc90      	pop	{r4, r7}
 80035ee:	4770      	bx	lr

080035f0 <LL_GPIO_SetPinSpeed>:
{
 80035f0:	b490      	push	{r4, r7}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0e1b      	lsrs	r3, r3, #24
 8003604:	4413      	add	r3, r2
 8003606:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	613b      	str	r3, [r7, #16]
  return result;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	2103      	movs	r1, #3
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	401a      	ands	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	61bb      	str	r3, [r7, #24]
  return result;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	4313      	orrs	r3, r2
 8003648:	6023      	str	r3, [r4, #0]
}
 800364a:	bf00      	nop
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bc90      	pop	{r4, r7}
 8003652:	4770      	bx	lr

08003654 <LL_GPIO_SetPinOutputType>:
{
 8003654:	b490      	push	{r4, r7}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0e1b      	lsrs	r3, r3, #24
 8003668:	4413      	add	r3, r2
 800366a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	613b      	str	r3, [r7, #16]
  return result;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	2104      	movs	r1, #4
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	61bb      	str	r3, [r7, #24]
  return result;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc90      	pop	{r4, r7}
 80036b6:	4770      	bx	lr

080036b8 <LL_GPIO_SetPinPull>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	613b      	str	r3, [r7, #16]
  return result;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	408b      	lsls	r3, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	60da      	str	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	60fb      	str	r3, [r7, #12]
  return result;
 800371c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003726:	e040      	b.n	80037aa <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	409a      	lsls	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d036      	beq.n	80037a4 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b07      	cmp	r3, #7
 800373a:	d806      	bhi.n	800374a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800373c:	f240 1201 	movw	r2, #257	; 0x101
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e008      	b.n	800375c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3b08      	subs	r3, #8
 800374e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800375a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	461a      	mov	r2, r3
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ffa7 	bl	80036b8 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff0a 	bl	800358c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d003      	beq.n	8003788 <LL_GPIO_Init+0x8c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d10d      	bne.n	80037a4 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	461a      	mov	r2, r3
 800378e:	69b9      	ldr	r1, [r7, #24]
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff2d 	bl	80035f0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	69b9      	ldr	r1, [r7, #24]
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff58 	bl	8003654 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1b8      	bne.n	8003728 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000000c 	.word	0x2000000c

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	; (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 f97a 	bl	8003ad4 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	; (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08003b10 	.word	0x08003b10
 8003808:	08003b10 	.word	0x08003b10
 800380c:	08003b10 	.word	0x08003b10
 8003810:	08003b14 	.word	0x08003b14

08003814 <memset>:
 8003814:	4603      	mov	r3, r0
 8003816:	4402      	add	r2, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <logf>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	f000 f82c 	bl	8003884 <__ieee754_logf>
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <logf+0x54>)
 800382e:	4605      	mov	r5, r0
 8003830:	f993 3000 	ldrsb.w	r3, [r3]
 8003834:	3301      	adds	r3, #1
 8003836:	d013      	beq.n	8003860 <logf+0x3c>
 8003838:	4621      	mov	r1, r4
 800383a:	4620      	mov	r0, r4
 800383c:	f7fd fb7a 	bl	8000f34 <__aeabi_fcmpun>
 8003840:	b970      	cbnz	r0, 8003860 <logf+0x3c>
 8003842:	2100      	movs	r1, #0
 8003844:	4620      	mov	r0, r4
 8003846:	f7fd fb6b 	bl	8000f20 <__aeabi_fcmpgt>
 800384a:	b948      	cbnz	r0, 8003860 <logf+0x3c>
 800384c:	2100      	movs	r1, #0
 800384e:	4620      	mov	r0, r4
 8003850:	f7fd fb3e 	bl	8000ed0 <__aeabi_fcmpeq>
 8003854:	b130      	cbz	r0, 8003864 <logf+0x40>
 8003856:	f7ff ffb3 	bl	80037c0 <__errno>
 800385a:	2322      	movs	r3, #34	; 0x22
 800385c:	4d07      	ldr	r5, [pc, #28]	; (800387c <logf+0x58>)
 800385e:	6003      	str	r3, [r0, #0]
 8003860:	4628      	mov	r0, r5
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	f7ff ffac 	bl	80037c0 <__errno>
 8003868:	2321      	movs	r3, #33	; 0x21
 800386a:	6003      	str	r3, [r0, #0]
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <logf+0x5c>)
 800386e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003872:	f000 b92b 	b.w	8003acc <nanf>
 8003876:	bf00      	nop
 8003878:	20000070 	.word	0x20000070
 800387c:	ff800000 	.word	0xff800000
 8003880:	08003b0c 	.word	0x08003b0c

08003884 <__ieee754_logf>:
 8003884:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	4601      	mov	r1, r0
 800388e:	4603      	mov	r3, r0
 8003890:	d106      	bne.n	80038a0 <__ieee754_logf+0x1c>
 8003892:	2100      	movs	r1, #0
 8003894:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8003898:	f7fd fa3a 	bl	8000d10 <__aeabi_fdiv>
 800389c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a0:	2800      	cmp	r0, #0
 80038a2:	da03      	bge.n	80038ac <__ieee754_logf+0x28>
 80038a4:	f7fd f876 	bl	8000994 <__aeabi_fsub>
 80038a8:	2100      	movs	r1, #0
 80038aa:	e7f5      	b.n	8003898 <__ieee754_logf+0x14>
 80038ac:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80038b0:	db02      	blt.n	80038b8 <__ieee754_logf+0x34>
 80038b2:	f7fd f871 	bl	8000998 <__addsf3>
 80038b6:	e7f1      	b.n	800389c <__ieee754_logf+0x18>
 80038b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80038bc:	da35      	bge.n	800392a <__ieee754_logf+0xa6>
 80038be:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80038c2:	f7fd f971 	bl	8000ba8 <__aeabi_fmul>
 80038c6:	f06f 0218 	mvn.w	r2, #24
 80038ca:	4603      	mov	r3, r0
 80038cc:	f3c3 0416 	ubfx	r4, r3, #0, #23
 80038d0:	15de      	asrs	r6, r3, #23
 80038d2:	4b71      	ldr	r3, [pc, #452]	; (8003a98 <__ieee754_logf+0x214>)
 80038d4:	3e7f      	subs	r6, #127	; 0x7f
 80038d6:	4423      	add	r3, r4
 80038d8:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 80038dc:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 80038e0:	4416      	add	r6, r2
 80038e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038e6:	4320      	orrs	r0, r4
 80038e8:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 80038ec:	f7fd f852 	bl	8000994 <__aeabi_fsub>
 80038f0:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <__ieee754_logf+0x218>)
 80038f2:	f104 020f 	add.w	r2, r4, #15
 80038f6:	4013      	ands	r3, r2
 80038f8:	4605      	mov	r5, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13a      	bne.n	8003974 <__ieee754_logf+0xf0>
 80038fe:	2100      	movs	r1, #0
 8003900:	f7fd fae6 	bl	8000ed0 <__aeabi_fcmpeq>
 8003904:	b198      	cbz	r0, 800392e <__ieee754_logf+0xaa>
 8003906:	2e00      	cmp	r6, #0
 8003908:	f000 80c4 	beq.w	8003a94 <__ieee754_logf+0x210>
 800390c:	4630      	mov	r0, r6
 800390e:	f7fd f8f7 	bl	8000b00 <__aeabi_i2f>
 8003912:	4963      	ldr	r1, [pc, #396]	; (8003aa0 <__ieee754_logf+0x21c>)
 8003914:	4605      	mov	r5, r0
 8003916:	f7fd f947 	bl	8000ba8 <__aeabi_fmul>
 800391a:	4962      	ldr	r1, [pc, #392]	; (8003aa4 <__ieee754_logf+0x220>)
 800391c:	4604      	mov	r4, r0
 800391e:	4628      	mov	r0, r5
 8003920:	f7fd f942 	bl	8000ba8 <__aeabi_fmul>
 8003924:	4601      	mov	r1, r0
 8003926:	4620      	mov	r0, r4
 8003928:	e7c3      	b.n	80038b2 <__ieee754_logf+0x2e>
 800392a:	2200      	movs	r2, #0
 800392c:	e7ce      	b.n	80038cc <__ieee754_logf+0x48>
 800392e:	495e      	ldr	r1, [pc, #376]	; (8003aa8 <__ieee754_logf+0x224>)
 8003930:	4628      	mov	r0, r5
 8003932:	f7fd f939 	bl	8000ba8 <__aeabi_fmul>
 8003936:	4601      	mov	r1, r0
 8003938:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800393c:	f7fd f82a 	bl	8000994 <__aeabi_fsub>
 8003940:	4629      	mov	r1, r5
 8003942:	4604      	mov	r4, r0
 8003944:	4628      	mov	r0, r5
 8003946:	f7fd f92f 	bl	8000ba8 <__aeabi_fmul>
 800394a:	4601      	mov	r1, r0
 800394c:	4620      	mov	r0, r4
 800394e:	f7fd f92b 	bl	8000ba8 <__aeabi_fmul>
 8003952:	4604      	mov	r4, r0
 8003954:	b90e      	cbnz	r6, 800395a <__ieee754_logf+0xd6>
 8003956:	4621      	mov	r1, r4
 8003958:	e06f      	b.n	8003a3a <__ieee754_logf+0x1b6>
 800395a:	4630      	mov	r0, r6
 800395c:	f7fd f8d0 	bl	8000b00 <__aeabi_i2f>
 8003960:	494f      	ldr	r1, [pc, #316]	; (8003aa0 <__ieee754_logf+0x21c>)
 8003962:	4607      	mov	r7, r0
 8003964:	f7fd f920 	bl	8000ba8 <__aeabi_fmul>
 8003968:	4606      	mov	r6, r0
 800396a:	4638      	mov	r0, r7
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <__ieee754_logf+0x220>)
 800396e:	f7fd f91b 	bl	8000ba8 <__aeabi_fmul>
 8003972:	e072      	b.n	8003a5a <__ieee754_logf+0x1d6>
 8003974:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003978:	f7fd f80e 	bl	8000998 <__addsf3>
 800397c:	4601      	mov	r1, r0
 800397e:	4628      	mov	r0, r5
 8003980:	f7fd f9c6 	bl	8000d10 <__aeabi_fdiv>
 8003984:	4681      	mov	r9, r0
 8003986:	4630      	mov	r0, r6
 8003988:	f7fd f8ba 	bl	8000b00 <__aeabi_i2f>
 800398c:	4649      	mov	r1, r9
 800398e:	4680      	mov	r8, r0
 8003990:	4648      	mov	r0, r9
 8003992:	f7fd f909 	bl	8000ba8 <__aeabi_fmul>
 8003996:	4601      	mov	r1, r0
 8003998:	4683      	mov	fp, r0
 800399a:	f7fd f905 	bl	8000ba8 <__aeabi_fmul>
 800399e:	4607      	mov	r7, r0
 80039a0:	4942      	ldr	r1, [pc, #264]	; (8003aac <__ieee754_logf+0x228>)
 80039a2:	f7fd f901 	bl	8000ba8 <__aeabi_fmul>
 80039a6:	4942      	ldr	r1, [pc, #264]	; (8003ab0 <__ieee754_logf+0x22c>)
 80039a8:	f7fc fff6 	bl	8000998 <__addsf3>
 80039ac:	4639      	mov	r1, r7
 80039ae:	f7fd f8fb 	bl	8000ba8 <__aeabi_fmul>
 80039b2:	4940      	ldr	r1, [pc, #256]	; (8003ab4 <__ieee754_logf+0x230>)
 80039b4:	f7fc fff0 	bl	8000998 <__addsf3>
 80039b8:	4639      	mov	r1, r7
 80039ba:	f7fd f8f5 	bl	8000ba8 <__aeabi_fmul>
 80039be:	493e      	ldr	r1, [pc, #248]	; (8003ab8 <__ieee754_logf+0x234>)
 80039c0:	f7fc ffea 	bl	8000998 <__addsf3>
 80039c4:	4659      	mov	r1, fp
 80039c6:	f7fd f8ef 	bl	8000ba8 <__aeabi_fmul>
 80039ca:	493c      	ldr	r1, [pc, #240]	; (8003abc <__ieee754_logf+0x238>)
 80039cc:	4683      	mov	fp, r0
 80039ce:	4638      	mov	r0, r7
 80039d0:	f7fd f8ea 	bl	8000ba8 <__aeabi_fmul>
 80039d4:	493a      	ldr	r1, [pc, #232]	; (8003ac0 <__ieee754_logf+0x23c>)
 80039d6:	f7fc ffdf 	bl	8000998 <__addsf3>
 80039da:	4639      	mov	r1, r7
 80039dc:	f7fd f8e4 	bl	8000ba8 <__aeabi_fmul>
 80039e0:	4938      	ldr	r1, [pc, #224]	; (8003ac4 <__ieee754_logf+0x240>)
 80039e2:	f7fc ffd9 	bl	8000998 <__addsf3>
 80039e6:	4639      	mov	r1, r7
 80039e8:	f7fd f8de 	bl	8000ba8 <__aeabi_fmul>
 80039ec:	4601      	mov	r1, r0
 80039ee:	4658      	mov	r0, fp
 80039f0:	f7fc ffd2 	bl	8000998 <__addsf3>
 80039f4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003ac8 <__ieee754_logf+0x244>
 80039f8:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 80039fc:	44a2      	add	sl, r4
 80039fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a02:	ea43 030a 	orr.w	r3, r3, sl
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	4607      	mov	r7, r0
 8003a0a:	dd30      	ble.n	8003a6e <__ieee754_logf+0x1ea>
 8003a0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7fd f8c9 	bl	8000ba8 <__aeabi_fmul>
 8003a16:	4629      	mov	r1, r5
 8003a18:	f7fd f8c6 	bl	8000ba8 <__aeabi_fmul>
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4638      	mov	r0, r7
 8003a22:	f7fc ffb9 	bl	8000998 <__addsf3>
 8003a26:	4649      	mov	r1, r9
 8003a28:	f7fd f8be 	bl	8000ba8 <__aeabi_fmul>
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	b946      	cbnz	r6, 8003a42 <__ieee754_logf+0x1be>
 8003a30:	4601      	mov	r1, r0
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7fc ffae 	bl	8000994 <__aeabi_fsub>
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f7fc ffaa 	bl	8000994 <__aeabi_fsub>
 8003a40:	e72c      	b.n	800389c <__ieee754_logf+0x18>
 8003a42:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <__ieee754_logf+0x21c>)
 8003a44:	4640      	mov	r0, r8
 8003a46:	f7fd f8af 	bl	8000ba8 <__aeabi_fmul>
 8003a4a:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <__ieee754_logf+0x220>)
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	4640      	mov	r0, r8
 8003a50:	f7fd f8aa 	bl	8000ba8 <__aeabi_fmul>
 8003a54:	4639      	mov	r1, r7
 8003a56:	f7fc ff9f 	bl	8000998 <__addsf3>
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7fc ff99 	bl	8000994 <__aeabi_fsub>
 8003a62:	4629      	mov	r1, r5
 8003a64:	f7fc ff96 	bl	8000994 <__aeabi_fsub>
 8003a68:	4601      	mov	r1, r0
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	e7e6      	b.n	8003a3c <__ieee754_logf+0x1b8>
 8003a6e:	4601      	mov	r1, r0
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7fc ff8f 	bl	8000994 <__aeabi_fsub>
 8003a76:	4649      	mov	r1, r9
 8003a78:	f7fd f896 	bl	8000ba8 <__aeabi_fmul>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	2e00      	cmp	r6, #0
 8003a80:	f43f af69 	beq.w	8003956 <__ieee754_logf+0xd2>
 8003a84:	4906      	ldr	r1, [pc, #24]	; (8003aa0 <__ieee754_logf+0x21c>)
 8003a86:	4640      	mov	r0, r8
 8003a88:	f7fd f88e 	bl	8000ba8 <__aeabi_fmul>
 8003a8c:	4905      	ldr	r1, [pc, #20]	; (8003aa4 <__ieee754_logf+0x220>)
 8003a8e:	4606      	mov	r6, r0
 8003a90:	4640      	mov	r0, r8
 8003a92:	e76c      	b.n	800396e <__ieee754_logf+0xea>
 8003a94:	2000      	movs	r0, #0
 8003a96:	e701      	b.n	800389c <__ieee754_logf+0x18>
 8003a98:	004afb20 	.word	0x004afb20
 8003a9c:	007ffff0 	.word	0x007ffff0
 8003aa0:	3f317180 	.word	0x3f317180
 8003aa4:	3717f7d1 	.word	0x3717f7d1
 8003aa8:	3eaaaaab 	.word	0x3eaaaaab
 8003aac:	3e178897 	.word	0x3e178897
 8003ab0:	3e3a3325 	.word	0x3e3a3325
 8003ab4:	3e924925 	.word	0x3e924925
 8003ab8:	3f2aaaab 	.word	0x3f2aaaab
 8003abc:	3e1cd04f 	.word	0x3e1cd04f
 8003ac0:	3e638e29 	.word	0x3e638e29
 8003ac4:	3ecccccd 	.word	0x3ecccccd
 8003ac8:	ffcf5c30 	.word	0xffcf5c30

08003acc <nanf>:
 8003acc:	4800      	ldr	r0, [pc, #0]	; (8003ad0 <nanf+0x4>)
 8003ace:	4770      	bx	lr
 8003ad0:	7fc00000 	.word	0x7fc00000

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
